<!DOCTYPE html>
<html lang="en" class="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real Estate CRM</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/main.min.css' rel='stylesheet' />
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js'></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0/dist/chartjs-plugin-datalabels.min.js"></script>
    <style>
        :root {
            --color-neutral-bg: #F8F9FA;
            --color-neutral-light: #FFFFFF;
            --color-neutral-medium: #E9ECEF;
            --color-neutral-border: #DEE2E6;
            --color-neutral-dark: #212529;
            --color-primary-pastel: #A8D8FF;
            --color-primary-pastel-darker: #79B9FF;
            --color-primary-text-on-pastel: #003366;
            --color-success-pastel: #AEE0AE;
            --color-success-pastel-darker: #77DD77;
            --color-success-text-on-pastel: #004d00;
            --color-destructive-pastel: #FFB6C1;
            --color-destructive-pastel-darker: #FF9999;
            --color-destructive-text-on-pastel: #590000;
            --color-secondary-text: #6C757D;
            --color-sidebar-bg: #2C3E50;
            --color-sidebar-text: #ECF0F1;
            --color-sidebar-active: #34495E;
            --color-sidebar-icon: #A7C7E7;
            --color-task-new-bg: #FFF9C4;
            --color-task-new-text: #795548;
            --color-task-pending-bg: #FFDCC1;
            --color-task-pending-text: #D84315;
            --color-task-in-progress-bg: #B2EBF2;
            --color-task-in-progress-text: #006064;
            --color-task-completed-bg: var(--color-success-pastel);
            --color-task-completed-text: var(--color-success-text-on-pastel);
            --color-task-deferred-bg: #E0E0E0;
            --color-task-deferred-text: #424242;
            
            --color-lead-new-lead-bg: #FFF9C4; 
            --color-lead-new-lead-text: #795548;
            --color-lead-contacted-bg: #FFE0B2; 
            --color-lead-contacted-text: #E65100;
            --color-lead-qualified-bg: #C8E6C9; 
            --color-lead-qualified-text: #1B5E20;
            --color-lead-showing-scheduled-bg: #B3E5FC; 
            --color-lead-showing-scheduled-text: #01579B;
            --color-lead-offer-made-bg: #D1C4E9; 
            --color-lead-offer-made-text: #311B92;
            --color-lead-under-contract-bg: #FFCCBC; 
            --color-lead-under-contract-text: #BF360C;
            --color-lead-closed-bg: var(--color-success-pastel); 
            --color-lead-closed-text: var(--color-success-text-on-pastel);
            --color-lead-lost-inactive-bg: #CFD8DC; 
            --color-lead-lost-inactive-text: #37474F;
            
            --color-kanban-list-bg: var(--color-neutral-light);
            --color-kanban-list-empty-bg: var(--color-neutral-medium);
            --color-kanban-lane-odd-bg: #E9ECEF; 
            --color-kanban-lane-even-bg: #F8F9FA; 
        }

        .dark {
            --color-neutral-bg: #1A1A1A;
            --color-neutral-light: #2C2C2E;
            --color-neutral-medium: #3A3A3C;
            --color-neutral-border: #48484A;
            --color-neutral-dark: #EAEAEA; 
            --color-primary-pastel: #5DA9FF;
            --color-primary-pastel-darker: #3C8CE7;
            --color-primary-text-on-pastel: #FFFFFF;
            --color-success-pastel: #6CC66C;
            --color-success-pastel-darker: #4CAF50;
            --color-success-text-on-pastel: #FFFFFF;
            --color-destructive-pastel: #FF8A8A;
            --color-destructive-pastel-darker: #FF5252;
            --color-destructive-text-on-pastel: #FFFFFF;
            --color-secondary-text: #ADB5BD; 
            --color-sidebar-bg: #1F2937;
            --color-sidebar-text: #D1D5DB;
            --color-sidebar-active: #374151;
            --color-sidebar-icon: #BDE0FE;
            --color-task-new-bg: #A1887F;
            --color-task-new-text: #FFFDE7;
            --color-task-pending-bg: #FFCC80;
            --color-task-pending-text: #3E2723;
            --color-task-in-progress-bg: #4DD0E1;
            --color-task-in-progress-text: #000000;
            --color-task-completed-bg: var(--color-success-pastel);
            --color-task-completed-text: var(--color-success-text-on-pastel);
            --color-task-deferred-bg: #757575;
            --color-task-deferred-text: #FFFFFF;

            --color-lead-new-lead-bg: #795548;
            --color-lead-new-lead-text: #FFF9C4;
            --color-lead-contacted-bg: #D84315;
            --color-lead-contacted-text: #FFE0B2;
            --color-lead-qualified-bg: #1B5E20;
            --color-lead-qualified-text: #C8E6C9;
            --color-lead-showing-scheduled-bg: #01579B;
            --color-lead-showing-scheduled-text: #B3E5FC;
            --color-lead-offer-made-bg: #311B92;
            --color-lead-offer-made-text: #D1C4E9;
            --color-lead-under-contract-bg: #BF360C;
            --color-lead-under-contract-text: #FFCCBC;
            --color-lead-closed-bg: var(--color-success-pastel-darker);
            --color-lead-closed-text: #FFFFFF;
            --color-lead-lost-inactive-bg: #37474F;
            --color-lead-lost-inactive-text: #CFD8DC;
            
            --color-kanban-list-bg: var(--color-neutral-light);
            --color-kanban-list-empty-bg: var(--color-neutral-medium);
            --color-kanban-lane-odd-bg: #3A3A3C;  
            --color-kanban-lane-even-bg: #2C2C2E; 
        }

        .bg-neutral-bg { background-color: var(--color-neutral-bg); }
        .bg-neutral-light { background-color: var(--color-neutral-light); }
        .border-neutral-border { border-color: var(--color-neutral-border); }
        .text-neutral-dark { color: var(--color-neutral-dark); }
        .bg-primary-pastel { background-color: var(--color-primary-pastel); }
        .text-primary-on-pastel { color: var(--color-primary-text-on-pastel); }
        .hover\:bg-primary-pastel-darker:hover { background-color: var(--color-primary-pastel-darker); }
        .text-primary-pastel { color: var(--color-primary-pastel); }
        .focus\:ring-primary-pastel { --tw-ring-color: var(--color-primary-pastel); }
        .focus\:border-primary-pastel { border-color: var(--color-primary-pastel); }
        .bg-success-pastel { background-color: var(--color-success-pastel); }
        .text-success-on-pastel { color: var(--color-success-text-on-pastel); }
        .hover\:bg-success-pastel-darker:hover { background-color: var(--color-success-pastel-darker); }
        .text-success-pastel { color: var(--color-success-pastel); }
        .bg-destructive-pastel { background-color: var(--color-destructive-pastel); }
        .text-destructive-on-pastel { color: var(--color-destructive-text-on-pastel); }
        .hover\:bg-destructive-pastel-darker:hover { background-color: var(--color-destructive-pastel-darker); }
        .text-destructive-pastel { color: var(--color-destructive-pastel); }
        .text-secondary-text { color: var(--color-secondary-text); }
        .bg-sidebar-bg { background-color: var(--color-sidebar-bg); }
        .text-sidebar-text { color: var(--color-sidebar-text); }
        .hover\:bg-sidebar-hover:hover { background-color: var(--color-sidebar-active); }
        .tab-button.active { background-color: var(--color-sidebar-active); color: var(--color-sidebar-text); }
        .light .bg-neutral-medium { background-color: #E9ECEF; }
        .dark .bg-neutral-medium { background-color: #3A3A3C; }

        .dark input[type="text"],
        .dark input[type="email"],
        .dark input[type="tel"],
        .dark input[type="password"],
        .dark input[type="date"],
        .dark input[type="url"],
        .dark select,
        .dark textarea {
            color: var(--color-neutral-dark); 
        }
        .dark input::placeholder,
        .dark textarea::placeholder {
            color: var(--color-secondary-text); 
        }
        .dark input:-webkit-autofill,
        .dark input:-webkit-autofill:hover, 
        .dark input:-webkit-autofill:focus, 
        .dark input:-webkit-autofill:active {
            -webkit-box-shadow: 0 0 0 30px var(--color-neutral-light) inset !important; 
            -webkit-text-fill-color: var(--color-neutral-dark) !important; 
        }


        .task-status-new { background-color: var(--color-task-new-bg); color: var(--color-task-new-text); border-left: 4px solid var(--color-task-new-text); }
        .task-status-pending { background-color: var(--color-task-pending-bg); color: var(--color-task-pending-text); border-left: 4px solid var(--color-task-pending-text); }
        .task-status-in-progress { background-color: var(--color-task-in-progress-bg); color: var(--color-task-in-progress-text); border-left: 4px solid var(--color-task-in-progress-text); }
        .task-status-completed { background-color: var(--color-task-completed-bg); color: var(--color-task-completed-text); border-left: 4px solid var(--color-task-completed-text); }
        .task-status-deferred { background-color: var(--color-task-deferred-bg); color: var(--color-task-deferred-text); border-left: 4px solid var(--color-task-deferred-text); }
        
        .kanban-lead-new-lead { background-color: var(--color-lead-new-lead-bg) !important; color: var(--color-lead-new-lead-text) !important; border-color: var(--color-lead-new-lead-text) !important; }
        .kanban-lead-contacted { background-color: var(--color-lead-contacted-bg) !important; color: var(--color-lead-contacted-text) !important; border-color: var(--color-lead-contacted-text) !important; }
        .kanban-lead-qualified { background-color: var(--color-lead-qualified-bg) !important; color: var(--color-lead-qualified-text) !important; border-color: var(--color-lead-qualified-text) !important; }
        .kanban-lead-showing-scheduled { background-color: var(--color-lead-showing-scheduled-bg) !important; color: var(--color-lead-showing-scheduled-text) !important; border-color: var(--color-lead-showing-scheduled-text) !important; }
        .kanban-lead-offer-made { background-color: var(--color-lead-offer-made-bg) !important; color: var(--color-lead-offer-made-text) !important; border-color: var(--color-lead-offer-made-text) !important; }
        .kanban-lead-under-contract { background-color: var(--color-lead-under-contract-bg) !important; color: var(--color-lead-under-contract-text) !important; border-color: var(--color-lead-under-contract-text) !important; }
        .kanban-lead-closed { background-color: var(--color-lead-closed-bg) !important; color: var(--color-lead-closed-text) !important; border-color: var(--color-lead-closed-text) !important; }
        .kanban-lead-lost-inactive { background-color: var(--color-lead-lost-inactive-bg) !important; color: var(--color-lead-lost-inactive-text) !important; border-color: var(--color-lead-lost-inactive-text) !important; }

        body { font-family: 'Inter', sans-serif; background-color: var(--color-neutral-bg); color: var(--color-neutral-dark); }
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: var(--color-neutral-medium); border-radius: 10px; }
        ::-webkit-scrollbar-thumb { background: var(--color-secondary-text); border-radius: 10px; }
        ::-webkit-scrollbar-thumb:hover { background: #64748b; }

        #kanban-board {
            @apply w-full p-4 grid gap-4; 
            grid-template-columns: repeat(1, 1fr); 
        }
        @media (min-width: 768px) { 
            #kanban-board {
                grid-template-columns: repeat(2, 1fr); 
            }
        }
        @media (min-width: 1024px) { 
            #kanban-board {
                grid-template-columns: repeat(4, 1fr); 
                padding: 1rem; 
            }
        }
        
        .kanban-column {
            @apply p-4 rounded-lg shadow-sm border border-neutral-border w-full;
            max-height: calc(100vh - 250px); 
            overflow-y: auto;
        }
        .kanban-column:nth-child(odd) {
            background-color: var(--color-kanban-lane-odd-bg);
        }
        .kanban-column:nth-child(even) {
            background-color: var(--color-kanban-lane-even-bg);
        }


        .kanban-column-header { @apply flex justify-between items-center mb-3 cursor-pointer; }
        .kanban-column-title { @apply font-semibold text-lg text-neutral-dark; }
        .kanban-column-toggle-icon { @apply w-5 h-5 text-neutral-dark transition-transform duration-200; }
        .kanban-column.collapsed .kanban-column-toggle-icon { transform: rotate(-90deg); }
        .kanban-column.collapsed .kanban-list { @apply hidden; }
        .kanban-list { background-color: var(--color-kanban-list-bg); @apply p-3 rounded-md border border-neutral-border min-h-[150px] flex flex-col space-y-2; overflow-y: auto; }
        .kanban-list-empty { background-color: var(--color-kanban-list-empty-bg); @apply items-center justify-center; }
        .kanban-list-empty p { color: var(--color-secondary-text); }
        .kanban-column::-webkit-scrollbar { width: 6px; }
        .kanban-column::-webkit-scrollbar-track { background: var(--color-neutral-bg); }
        .kanban-column::-webkit-scrollbar-thumb { background: var(--color-neutral-medium); border-radius: 3px; }
        .kanban-column::-webkit-scrollbar-thumb:hover { background: var(--color-secondary-text); }

        .fc .fc-button { @apply px-4 py-2 rounded-md bg-primary-pastel text-primary-on-pastel hover:bg-primary-pastel-darker transition-colors duration-200; }
        .fc .fc-button-primary:not(:disabled).fc-button-active { background-color: var(--color-primary-pastel-darker) !important; color: var(--color-primary-text-on-pastel) !important; }
        .fc .fc-toolbar-title { @apply text-xl font-semibold text-neutral-dark; }
        .modal-content { @apply bg-neutral-light p-6 rounded-lg shadow-xl w-11/12 md:w-1/2 lg:w-1/3 relative; }
        .dark .modal-content { color: var(--color-neutral-dark); } 
        .sortable-ghost { background-color: var(--color-primary-pastel-darker) !important; opacity: 0.75; border-radius: 0.5rem; }
        .sidebar-icon { stroke: var(--color-sidebar-icon); }
        .dark .sidebar-icon { stroke: var(--color-sidebar-icon); }
        
        .custom-chart-legend {
            @apply grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2 mt-4; 
        }
        .legend-item {
            @apply px-2 py-1.5 rounded-md text-xs font-medium flex items-center justify-center shadow-sm cursor-pointer hover:opacity-80 transition-opacity text-center;
            min-height: 40px; 
        }
    </style>
</head>
<body class="min-h-screen flex font-inter bg-neutral-bg text-neutral-dark">
    
    <div id="login-screen" class="fixed inset-0 bg-neutral-bg flex flex-col items-center justify-center z-[100]">
        <div class="bg-neutral-light p-8 md:p-12 rounded-xl shadow-2xl w-full max-w-md text-center">
            <img src="https://dwellverse.io/wp-content/uploads/2025/06/READY-RE-Business-Card-Back_FINAL-1.png" alt="CRM Logo" class="w-auto max-w-[300px] h-auto max-h-[80px] mx-auto mb-8 rounded-md" onerror="this.onerror=null;this.src='https://placehold.co/300x80/FFFFFF/003366?text=Logo';">
            <h2 class="text-2xl font-bold text-neutral-dark mb-6">Welcome Back!</h2>
            <form id="login-form" class="space-y-6">
                <div>
                    <label for="username" class="block text-sm font-medium text-neutral-dark text-left">Username</label>
                    <input type="text" id="username" name="username" required
                           class="mt-1 block w-full p-3 border border-neutral-border rounded-md shadow-sm focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                </div>
                <div>
                    <label for="password" class="block text-sm font-medium text-neutral-dark text-left">Password</label>
                    <input type="password" id="password" name="password" required
                           class="mt-1 block w-full p-3 border border-neutral-border rounded-md shadow-sm focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                </div>
                <button type="submit"
                        class="w-full bg-primary-pastel text-primary-on-pastel py-3 px-4 rounded-md hover:bg-primary-pastel-darker transition-colors duration-200 font-semibold text-lg">
                    Login
                </button>
            </form>
            <p id="login-error-message" class="mt-4 text-destructive-pastel text-sm hidden"></p>
        </div>
    </div>

    <div id="loading-spinner" class="fixed inset-0 bg-neutral-bg bg-opacity-75 flex items-center justify-center z-50 hidden">
        <div class="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-primary-pastel"></div>
        <p class="ml-4 text-lg font-semibold text-neutral-dark">Loading CRM...</p>
    </div>

    <div id="main-app-content" class="min-h-screen flex w-full hidden">
        <aside class="w-64 flex-shrink-0 bg-sidebar-bg text-sidebar-text flex flex-col p-4 shadow-lg rounded-r-lg">
            <div class="flex items-center justify-center mb-6 pt-4">
                <img src="https://dwellverse.io/wp-content/uploads/2025/05/logo.jpg" alt="Dwellverse Logo" class="w-28 h-28 rounded-full object-cover mb-2 shadow-md" onerror="this.onerror=null;this.src='https://placehold.co/150x150/E5E5EA/8E8E93?text=Logo';">
            </div>
            <h1 class="text-xl font-bold text-center mb-6" id="sidebar-crm-title">Real Estate CRM</h1>
            <nav class="flex flex-col flex-grow space-y-2">
                <button id="dashboard-tab" class="tab-button flex items-center px-4 py-3 rounded-lg font-medium text-sidebar-text hover:bg-sidebar-hover transition-colors duration-200 active">
                    <svg class="w-6 h-6 mr-3 sidebar-icon" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>
                    Dashboard
                </button>
                <button id="leads-tab" class="tab-button flex items-center px-4 py-3 rounded-lg font-medium text-sidebar-text hover:bg-sidebar-hover transition-colors duration-200">
                    <svg class="w-6 h-6 mr-3 sidebar-icon" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><polyline points="17 11 19 13 23 9"></polyline></svg>
                    Leads
                </button>
                <button id="kanban-tab" class="tab-button flex items-center px-4 py-3 rounded-lg font-medium text-sidebar-text hover:bg-sidebar-hover transition-colors duration-200">
                     <svg class="w-6 h-6 mr-3 sidebar-icon" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="12" y1="8" x2="12" y2="16"></line><line x1="8" y1="12" x2="16" y2="12"></line></svg>
                    Kanban Board
                </button>
                <button id="calendar-tab" class="tab-button flex items-center px-4 py-3 rounded-lg font-medium text-sidebar-text hover:bg-sidebar-hover transition-colors duration-200">
                    <svg class="w-6 h-6 mr-3 sidebar-icon" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>
                    Calendar
                </button>
                <button id="tasks-tab" class="tab-button flex items-center px-4 py-3 rounded-lg font-medium text-sidebar-text hover:bg-sidebar-hover transition-colors duration-200 mb-2">
                    <svg class="w-6 h-6 mr-3 sidebar-icon" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>
                    Tasks
                </button>
                <button id="drip-tab" class="tab-button flex items-center px-4 py-3 rounded-lg font-medium text-sidebar-text hover:bg-sidebar-hover transition-colors duration-200 mb-2">
                    <svg class="w-6 h-6 mr-3 sidebar-icon" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M22 2L11 13L2 9L9 2Z"></path>
                        <path d="M7 13L2 22"></path>
                        <path d="M16 8L22 2"></path>
                    </svg>
                    Drip
                </button>
                <button id="emails-tab" class="tab-button flex items-center px-4 py-3 rounded-lg font-medium text-sidebar-text hover:bg-sidebar-hover transition-colors duration-200 mb-2">
                    <svg class="w-6 h-6 mr-3 sidebar-icon" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path><polyline points="22,6 12,13 2,6"></polyline></svg>
                    Emails
                </button>
                <div class="flex-grow"></div>
                <button id="profile-tab" class="tab-button flex items-center px-4 py-3 rounded-lg font-medium text-sidebar-text hover:bg-sidebar-hover transition-colors duration-200">
                    <svg class="w-6 h-6 mr-3 sidebar-icon" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>
                    Profile
                </button>
                <button id="theme-toggle" class="flex items-center px-4 py-3 rounded-lg font-medium text-sidebar-text hover:bg-sidebar-hover transition-colors duration-200">
                    <svg class="w-6 h-6 mr-3 sidebar-icon" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>
                    <span id="theme-text">Light Mode</span>
                </button>
                <button id="logout-button" class="flex items-center px-4 py-3 rounded-lg font-medium text-sidebar-text hover:bg-sidebar-hover transition-colors duration-200 bg-destructive-pastel text-destructive-on-pastel hover:bg-destructive-pastel-darker">
                     <svg class="w-6 h-6 mr-3 sidebar-icon" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path><polyline points="16 17 21 12 16 7"></polyline><line x1="21" y1="12" x2="9" y2="12"></line></svg>
                    Logout
                </button>
            </nav>
        </aside>

        <div id="app-content" class="flex flex-col flex-grow">
            <header class="bg-sidebar-bg text-sidebar-text shadow-lg h-[100px]">
                <div class="container mx-auto flex justify-center items-center h-full px-3 md:px-6"> 
                    <img id="header-main-logo" src="https://dwellverse.io/wp-content/uploads/2025/06/READY-RE-Business-Card-Back_FINAL-1.png" alt="Header Logo" class="w-auto max-w-[250px] md:max-w-[300px] h-auto max-h-[80px] rounded-md cursor-pointer" onerror="this.onerror=null;this.src='https://placehold.co/300x80/ECF0F1/2C3E50?text=Logo';">
                </div>
            </header>
            <main class="flex-grow p-6 overflow-auto bg-neutral-bg">
                <div id="dashboard-section" class="tab-content active">
                    <h2 class="text-xl font-semibold mb-6 text-neutral-dark">Dashboard</h2>
                    
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                        <div class="bg-neutral-light p-6 rounded-lg shadow-sm border border-neutral-border">
                            <h3 class="text-lg font-medium mb-4 text-neutral-dark">Lead Status Distribution</h3>
                            <div class="max-w-md mx-auto h-64 md:h-72 lg:h-80 relative">
                                <canvas id="leadStatusRingChart"></canvas>
                            </div>
                            <div id="leadStatusCustomLegend" class="custom-chart-legend"></div>
                        </div>
                        <div class="bg-neutral-light p-6 rounded-lg shadow-sm border border-neutral-border">
                            <h3 class="text-lg font-medium mb-4 text-neutral-dark">Task Status Distribution</h3>
                            <div class="max-w-md mx-auto h-64 md:h-72 lg:h-80 relative">
                                <canvas id="taskStatusRingChart"></canvas>
                            </div>
                             <div id="taskStatusCustomLegend" class="custom-chart-legend"></div>
                        </div>
                    </div>

                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm mb-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark">Quick Add Lead</h3>
                        <form id="quick-add-lead-form" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <input type="text" id="quick-lead-first-name" placeholder="First Name" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="text" id="quick-lead-last-name" placeholder="Last Name" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="email" id="quick-lead-email" placeholder="Email (Optional)" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="tel" id="quick-lead-phone" placeholder="Phone (Optional)" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <button type="submit" class="col-span-full bg-primary-pastel text-primary-on-pastel py-3 px-4 rounded-md hover:bg-primary-pastel-darker transition-colors duration-200 font-semibold">Add Quick Lead</button>
                        </form>
                    </div>
                     <div class="bg-neutral-light p-6 rounded-lg shadow-sm mb-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark">Quick Add Task</h3>
                        <button id="dashboard-quick-add-task-button" class="w-full bg-success-pastel text-success-on-pastel py-3 px-4 rounded-md hover:bg-success-pastel-darker transition-colors duration-200 font-semibold">
                            Add New Task
                        </button>
                    </div>


                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark">Upcoming Tasks (Next 7 Days)</h3>
                        <div id="dashboard-upcoming-tasks-filter-buttons" class="flex flex-wrap gap-2 mb-4" style="min-height: 50px; align-items: center;">
                            </div>
                        <p class="text-secondary-text mb-4" id="no-upcoming-tasks">No upcoming tasks for the next 7 days.</p>
                        <div id="next-7-tasks-list" class="grid grid-cols-1 md:grid-cols-2 gap-3">
                            </div>
                    </div>
                </div>

                <div id="leads-section" class="tab-content hidden">
                     <h2 class="text-xl font-semibold mb-6 text-neutral-dark">Manage Leads</h2>
                     <div class="bg-neutral-light p-6 rounded-lg shadow-sm mb-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark">All Leads</h3>
                        <p class="text-secondary-text mb-4" id="no-leads-message">No leads found. Add one below!</p>
                        <div id="leads-filter-buttons" class="flex flex-wrap gap-2 mb-4">
                            </div>
                        <div id="leads-filter-status" class="text-secondary-text mb-2 hidden">
                            Showing leads with status: <span id="current-lead-filter" class="font-semibold text-primary-pastel"></span>
                            <button id="clear-leads-filter-button" class="ml-2 px-2 py-1 rounded-md bg-neutral-medium text-neutral-dark text-xs hover:bg-neutral-border transition-colors">Clear Filter</button>
                        </div>
                        <div id="leads-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            </div>
                    </div>
                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm mb-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark" id="lead-form-title">Add New Lead</h3>
                        <form id="add-lead-form" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            <input type="hidden" id="editing-lead-id"> <input type="text" id="lead-first-name" placeholder="First Name" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="text" id="lead-last-name" placeholder="Last Name" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="email" id="lead-email" placeholder="Email" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="tel" id="lead-phone" placeholder="Phone" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="text" id="lead-source" placeholder="Lead Source" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <select id="lead-type" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark">
                                <option value="">Select Lead Type</option>
                                <option value="Buyer">Buyer</option>
                                <option value="Seller">Seller</option>
                                 <option value="Renter">Renter</option>
                                <option value="Investor">Investor</option>
                            </select>
                            <select id="lead-status" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark">
                                </select>
                            <input type="text" id="lead-tags" placeholder="Tags (comma-separated)" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="text" id="lead-company" placeholder="Company (Optional)" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="text" id="lead-job-title" placeholder="Job Title (Optional)" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="text" id="lead-address" placeholder="Address (Optional)" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="text" id="lead-city" placeholder="City (Optional)" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="text" id="lead-state" placeholder="State (Optional)" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="text" id="lead-zip" placeholder="ZIP (Optional)" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="text" id="lead-country" placeholder="Country (Optional)" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="url" id="lead-facebook" placeholder="Facebook URL (Optional)" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="url" id="lead-instagram" placeholder="Instagram URL (Optional)" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="url" id="lead-tiktok" placeholder="TikTok URL (Optional)" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <textarea id="lead-notes" placeholder="Notes" class="p-3 border border-neutral-border rounded-md col-span-full focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text"></textarea>
                            <button type="submit" id="add-lead-submit-button" class="col-span-full bg-primary-pastel text-primary-on-pastel py-3 px-4 rounded-md hover:bg-primary-pastel-darker transition-colors duration-200 font-semibold">Add Lead</button>
                        </form>
                    </div>

                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm mt-6 border border-neutral-border text-center"> <h3 class="text-lg font-medium mb-4 text-neutral-dark">Import Leads from CSV</h3>
                        <div class="flex flex-col md:flex-row items-center justify-center gap-4"> <input type="file" id="csv-file-input" accept=".csv" class="p-3 border border-neutral-border rounded-md bg-neutral-light text-neutral-dark file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary-light file:text-primary hover:file:bg-primary-dark">
                            <button id="import-csv-button" class="bg-success-pastel text-success-on-pastel py-3 px-4 rounded-md hover:bg-success-pastel-darker transition-colors duration-200 font-semibold">Import CSV</button>
                        </div>
                        <p class="text-sm text-secondary-text mt-2">Upload a CSV file with columns matching lead fields (e.g., firstName, lastName, email, etc.).</p>
                    </div>
                </div>

                <div id="kanban-section" class="tab-content hidden w-full">
                    <h2 class="text-xl font-semibold mb-6 text-neutral-dark">Lead Kanban Board</h2>
                     <div id="kanban-board" class="w-full p-4 grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-4"> 
                        </div>
                </div>

                <div id="calendar-section" class="tab-content hidden">
                    <h2 class="text-xl font-semibold mb-6 text-neutral-dark">Calendar View</h2>
                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm mb-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark">Filter Calendar Tasks</h3>
                        <div id="calendar-filter-buttons" class="flex flex-wrap gap-2 mb-4">
                            <button class="calendar-filter-button px-4 py-2 rounded-lg font-medium text-neutral-dark bg-neutral-medium hover:bg-neutral-border transition-colors duration-200 active" data-filter="All">All Tasks</button>
                            <button class="calendar-filter-button px-4 py-2 rounded-lg font-medium text-neutral-dark bg-neutral-medium hover:bg-neutral-border transition-colors duration-200" data-filter="New">New</button>
                            <button class="calendar-filter-button px-4 py-2 rounded-lg font-medium text-neutral-dark bg-neutral-medium hover:bg-neutral-border transition-colors duration-200" data-filter="Pending">Pending</button>
                            <button class="calendar-filter-button px-4 py-2 rounded-lg font-medium text-neutral-dark bg-neutral-medium hover:bg-neutral-border transition-colors duration-200" data-filter="In Progress">In Progress</button>
                            <button class="calendar-filter-button px-4 py-2 rounded-lg font-medium text-neutral-dark bg-neutral-medium hover:bg-neutral-border transition-colors duration-200" data-filter="Completed">Completed</button>
                            <button class="calendar-filter-button px-4 py-2 rounded-lg font-medium text-neutral-dark bg-neutral-medium hover:bg-neutral-border transition-colors duration-200" data-filter="Deferred">Deferred</button>
                        </div>
                    </div>
                    <div id="calendar" class="bg-neutral-light p-4 rounded-lg shadow-sm border border-neutral-border"></div>
                    <div class="mt-6 text-center"> <button id="export-ical-button" class="bg-primary-pastel text-primary-on-pastel py-3 px-4 rounded-md hover:bg-primary-pastel-darker transition-colors duration-200 font-semibold">Sync Calendar (Export iCal)</button>
                    </div>
                </div>

                <div id="tasks-section" class="tab-content hidden">
                    <h2 class="text-xl font-semibold mb-6 text-neutral-dark">Manage Tasks</h2>
                     <div class="bg-neutral-light p-6 rounded-lg shadow-sm mb-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark">All Tasks</h3>
                        <p class="text-secondary-text mb-4" id="no-tasks-message">No tasks found. Add one below!</p>
                        <div id="tasks-filter-buttons" class="flex flex-wrap gap-2 mb-4">
                             </div>
                        <div id="tasks-filter-status" class="text-secondary-text mb-2 hidden">
                            Showing tasks with status: <span id="current-task-filter" class="font-semibold text-primary-pastel"></span>
                            <button id="clear-tasks-filter-button" class="ml-2 px-2 py-1 rounded-md bg-neutral-medium text-neutral-dark text-xs hover:bg-neutral-border transition-colors">Clear Filter</button>
                        </div>
                        <div id="tasks-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            </div>
                    </div>
                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm mb-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark" id="task-form-title">Add New Task</h3>
                        <form id="add-task-form" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <input type="hidden" id="editing-task-id"> 
                            <input type="text" id="task-title" placeholder="Task Title" required class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <textarea id="task-description" placeholder="Description" class="p-3 border border-neutral-border rounded-md w-full focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text"></textarea>
                            <input type="date" id="task-due-date" required class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark">
                            <select id="task-related-lead" required class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark">
                                <option value="">Select Related Lead*</option>
                                </select>
                            <select id="task-status" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark">
                                <option value="New">New</option>
                                <option value="Pending">Pending</option>
                                <option value="In Progress">In Progress</option>
                                <option value="Completed">Completed</option>
                                <option value="Deferred">Deferred</option>
                            </select>
                            <button type="submit" id="add-task-submit-button" class="col-span-full bg-primary-pastel text-primary-on-pastel py-3 px-4 rounded-md hover:bg-primary-pastel-darker transition-colors duration-200 font-semibold">Add Task</button>
                        </form>
                    </div>
                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm mb-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark">Quick Add Common Tasks</h3>
                        <div id="quick-tasks-grid" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
                            <button class="quick-task-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-md hover:bg-neutral-border transition-colors duration-200 text-sm font-medium" data-title="Initial Call" data-description="Make the first contact with the new lead.">Initial Call</button>
                            <button class="quick-task-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-md hover:bg-neutral-border transition-colors duration-200 text-sm font-medium" data-title="Send Listings" data-description="Send relevant property listings based on lead's criteria.">Send Listings</button>
                            <button class="quick-task-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-md hover:bg-neutral-border transition-colors duration-200 text-sm font-medium" data-title="Schedule Showing" data-description="Arrange a property showing for the lead.">Schedule Showing</button>
                            <button class="quick-task-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-md hover:bg-neutral-border transition-colors duration-200 text-sm font-medium" data-title="Follow Up Email" data-description="Send a follow-up email after a call or showing.">Follow Up Email</button>
                            <button class="quick-task-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-md hover:bg-neutral-border transition-colors duration-200 text-sm font-medium" data-title="Prepare Offer" data-description="Prepare an offer document for the lead.">Prepare Offer</button>
                            <button class="quick-task-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-md hover:bg-neutral-border transition-colors duration-200 text-sm font-medium" data-title="Contract Review" data-description="Review the contract with the lead.">Contract Review</button>
                            <button class="quick-task-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-md hover:bg-neutral-border transition-colors duration-200 text-sm font-medium" data-title="Closing Prep" data-description="Prepare all necessary documents for closing.">Closing Prep</button>
                            <button class="quick-task-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-md hover:bg-neutral-border transition-colors duration-200 text-sm font-medium" data-title="Post-Closing Follow Up" data-description="Follow up with the client after closing.">Post-Closing Follow Up</button>
                        </div>
                    </div>
                </div>

                <div id="emails-section" class="tab-content hidden"> 
                    <h2 class="text-xl font-semibold mb-6 text-neutral-dark">Email Marketing & Templates</h2>
                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm mb-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark" id="template-form-title">Create New Email Template</h3>
                        <form id="create-template-form" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <input type="hidden" id="editing-template-id">
                            <input type="text" id="template-name" placeholder="Template Name" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel col-span-full bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <input type="text" id="template-subject" placeholder="Email Subject Line" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel col-span-full bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <textarea id="template-body" placeholder="Email Body (use tokens like {{lead.firstName}}, {{agent.name}})" class="p-3 border border-neutral-border rounded-md w-full h-32 focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel col-span-full bg-neutral-light text-neutral-dark placeholder-secondary-text"></textarea>
                            <div class="col-span-full text-sm text-secondary-text">
                                <p class="font-medium mb-1 text-neutral-dark">Available Personalization Tokens:</p>
                                <ul class="list-disc list-inside">
                                    <li>`{{lead.firstName}}` - Lead's First Name</li>
                                    <li>`{{lead.lastName}}` - Lead's Last Name</li>
                                    <li>`{{lead.email}}` - Lead's Email</li>
                                    <li>`{{lead.phone}}` - Lead's Phone</li>
                                    <li>`{{lead.status}}` - Lead's Current Status</li>
                                    <li>`{{lead.leadType}}` - Lead's Type (Buyer/Seller)</li>
                                    <li>`{{lead.source}}` - Lead's Source</li>
                                    <li>`{{agent.name}}` - Your Name (Placeholder)</li>
                                    <li>`{{agent.email}}` - Your Email (Placeholder)</li>
                                </ul>
                            </div>
                            <button type="submit" id="create-template-submit-button" class="col-span-full bg-primary-pastel text-primary-on-pastel py-3 px-4 rounded-md hover:bg-primary-pastel-darker transition-colors duration-200 font-semibold">Save Template</button>
                        </form>
                    </div>
                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm mb-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark" id="campaign-form-title">Create New Drip Campaign</h3>
                        <form id="create-campaign-form" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <input type="hidden" id="editing-campaign-id">
                            <input type="text" id="campaign-name" placeholder="Campaign Name" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel col-span-full bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <textarea id="campaign-description" placeholder="Campaign Description" class="p-3 border border-neutral-border rounded-md w-full h-20 focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel col-span-full bg-neutral-light text-neutral-dark placeholder-secondary-text"></textarea>
                            <select id="campaign-trigger" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark">
                                <option value="">Select Trigger</option>
                                <option value="lead-added">Lead Added</option>
                                <option value="status-updated">Status Updated</option>
                                <option value="tag-applied">Tag Applied</option>
                            </select>
                            <div class="col-span-full">
                                <h4 class="font-medium text-neutral-dark mb-2">Campaign Steps:</h4>
                                <div id="campaign-steps-container" class="space-y-3">
                                    <div class="flex items-center gap-2 campaign-step-item">
                                        <input type="number" placeholder="Delay (days)" class="campaign-step-delay p-2 border border-neutral-border rounded-md w-24 bg-neutral-light text-neutral-dark placeholder-secondary-text">
                                        <select class="campaign-step-template p-2 border border-neutral-border rounded-md flex-grow bg-neutral-light text-neutral-dark">
                                            <option value="">Select Email Template</option>
                                            </select>
                                        <button type="button" class="remove-step-button bg-destructive-pastel text-destructive-on-pastel p-2 rounded-md hover:bg-destructive-pastel-darker transition-colors">
                                            <svg class="w-4 h-4 pointer-events-none" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                                        </button>
                                    </div>
                                </div>
                                <button type="button" id="add-campaign-step-button" class="mt-3 bg-neutral-medium text-neutral-dark py-2 px-4 rounded-md hover:bg-neutral-border transition-colors duration-200 text-sm font-medium">Add Step</button>
                            </div>
                            <button type="submit" id="create-campaign-submit-button" class="col-span-full bg-primary-pastel text-primary-on-pastel py-3 px-4 rounded-md hover:bg-primary-pastel-darker transition-colors duration-200 font-semibold">Save Campaign</button>
                        </form>
                    </div>
                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm mb-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark">Existing Email Templates</h3>
                        <p class="text-secondary-text mb-4" id="no-templates-message">No templates found. Create one above!</p>
                        <div id="templates-list" class="grid grid-cols-1 gap-4">
                            </div>
                    </div>
                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark">Existing Drip Campaigns</h3>
                        <p class="text-secondary-text mb-4" id="no-campaigns-message">No campaigns found. Create one above!</p>
                        <div id="campaigns-list" class="grid grid-cols-1 gap-4">
                            </div>
                    </div>
                     <div class="bg-neutral-light p-6 rounded-lg shadow-sm mt-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark">Campaign Analytics & Performance (Placeholder)</h3>
                        <p class="text-secondary-text">This section would display metrics like email open rates, click-through rates, and reply rates for each campaign.</p>
                    </div>
                </div>

                <div id="drip-section" class="tab-content hidden"> 
                    <h2 class="text-xl font-semibold mb-6 text-neutral-dark">Drip Campaigns & Email Templates</h2>
                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm mb-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark">Pre-made Email Templates (Drip)</h3>
                        <div id="drip-premade-templates-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                            <h4 class="col-span-full font-semibold text-neutral-dark mt-4 mb-2">Buyer-Focused Drip Campaigns</h4>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Welcome Email"
                                data-template-subject="Welcome to Your Home Search Journey!"
                                data-template-body="Hi {{lead.firstName}},\n\nWelcome to your personalized home search experience! We're excited to help you find your ideal home in {{lead.city}}.\n\nWhat to expect next: We'll be sending you curated listings and helpful tips based on your preferences. Feel free to reply to this email with any questions or specific requirements you have.\n\nBest regards,\n{{agent.name}}">
                                Welcome Email
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Property Search Tips"
                                data-template-subject="Tips for Finding Your Ideal Home in {{lead.city}}"
                                data-template-body="Hi {{lead.firstName}},\n\nReady to dive deeper into your home search? Here are some tips to help you narrow down your ideal home:\n\n1. Define Your Must-Haves: List your non-negotiables (e.g., number of bedrooms, specific school district).\n2. Set Your Budget: Get pre-approved to know your exact buying power.\n3. Explore Neighborhoods: Research areas that fit your lifestyle.\n\nI'm here to guide you every step of the way. Let me know if you'd like to discuss these in more detail!\n\nSincerely,\n{{agent.name}}">
                                Property Search Tips
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Neighborhood Guides"
                                data-template-subject="Discovering the Best Neighborhoods in {{lead.city}}"
                                data-template-body="Hello {{lead.firstName}},\n\nChoosing the right neighborhood is just as important as choosing the right home! As you look for properties in {{lead.city}}, I wanted to share some insights into popular areas.\n\nWould you be interested in a detailed guide for specific neighborhoods like [Neighborhood A] or [Neighborhood B]? They offer [mention specific amenities like good schools, parks, dining].\n\nLet's find the perfect fit!\n\nRegards,\n{{agent.name}}">
                                Neighborhood Guides
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Financing Info"
                                data-template-subject="Understanding Your Mortgage Options"
                                data-template-body="Hi {{lead.firstName}},\n\nNavigating financing options can feel complex, but it's a crucial step in the home buying process. I wanted to share some basic information about mortgage types and why pre-approval is so important.\n\n[Link to a helpful article or resource on your website]\n\nGetting pre-approved not only clarifies your budget but also makes your offers more competitive. I can connect you with trusted local lenders if you need recommendations.\n\nBest,\n{{agent.name}}">
                                Financing Info
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Home Buying Process Overview"
                                data-template-subject="Your Step-by-Step Guide to Buying a Home"
                                data-template-body="Hello {{lead.firstName}},\n\nTo help you visualize the journey ahead, here's a quick overview of the typical home buying process:\n\n1. Pre-approval\n2. Home Search\n3. Making an Offer\n4. Inspections & Appraisal\n5. Closing\n\nEach step has its nuances, and I'll be there to guide you through all of them. What part of the process are you most curious about?\n\nSincerely,\n{{agent.name}}">
                                Home Buying Process Overview
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="New Listing Alerts"
                                data-template-subject="New Homes Just Listed in {{lead.city}} Matching Your Criteria!"
                                data-template-body="Hi {{lead.firstName}},\n\nGreat news! A new property just hit the market in {{lead.city}} that closely matches what you're looking for:\n\n[Property Address]\n[Brief Description]\n[Link to Listing]\n\nLet me know if you'd like to schedule a private showing or learn more about this home!\n\nBest,\n{{agent.name}}">
                                New Listing Alerts
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Follow-Up After Showing"
                                data-template-subject="Your Feedback on [Property Address]"
                                data-template-body="Hello {{lead.firstName}},\n\nThank you for taking the time to view [Property Address] today. I hope you found the showing insightful!\n\nI'd love to hear your thoughts. What did you like or dislike about the property? Are there any questions I can answer? Your feedback helps us refine your search.\n\nLooking forward to your thoughts,\n{{agent.name}}">
                                Follow-Up After Showing
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Are You Still Looking Check-In"
                                data-template-subject="Quick Check-In: Your Home Search"
                                data-template-body="Hi {{lead.firstName}},\n\nHope you're having a great week! I haven't heard from you in a little while regarding your home search in {{lead.city}}.\n\nAre you still actively looking, or have your plans changed? I'm here to help whenever you're ready, whether that's today or a few months from now.\n\nJust reply to this email to let me know!\n\nBest regards,\n{{agent.name}}">
                                “Are You Still Looking?” Check-In
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Buyer Market Update"
                                data-template-subject="Local Market Update: What Buyers Need to Know in {{lead.city}}"
                                data-template-body="Hello {{lead.firstName}},\n\nStaying informed about the local market is key when buying a home. Here's a quick snapshot of current trends in {{lead.city}}:\n\n- Average Days on Market: [X days]\n- Median Home Price: [Y]\n- Inventory Levels: [Low/Medium/High]\n\nUnderstanding these trends can help us craft a strong strategy for your purchase. Let me know if you have any questions!\n\nSincerely,\n{{agent.name}}">
                                Market Update (Buyer)
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Buyer Success Stories"
                                data-template-subject="See How [Client Name] Found Their Dream Home in {{lead.city}}!"
                                data-template-body="Hi {{lead.firstName}},\n\nI love helping clients achieve their homeownership dreams! I wanted to share a recent success story that might inspire you.\n\n[Brief story about a client you helped, e.g., 'Just last month, I helped the [Client Last Name] family find their perfect 4-bedroom home in [Neighborhood] after a challenging search.']\n\nTheir journey shows what's possible with the right guidance. Ready to start your own success story?\n\nBest,\n{{agent.name}}">
                                Success Stories / Testimonials (Buyer)
                            </button>

                            <h4 class="col-span-full font-semibold text-neutral-dark mt-4 mb-2">Seller-Focused Drip Campaigns</h4>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Intro to Selling with You"
                                data-template-subject="Your Partner in Selling Your Home in {{lead.city}}"
                                data-template-body="Hello {{lead.firstName}},\n\nThank you for considering me as your real estate partner! I'm dedicated to making your selling experience smooth and successful.\n\nMy approach focuses on [mention unique selling propositions, e.g., 'strategic marketing, expert negotiation, and clear communication']. I aim to get you the best possible price in the shortest amount of time.\n\nLet's connect to discuss your goals in detail.\n\nSincerely,\n{{agent.name}}">
                                Intro to Selling with You
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Home Value Estimate Offer"
                                data-template-subject="Curious About Your Home's Current Value in {{lead.city}}?"
                                data-template-body="Hi {{lead.firstName}},\n\nThe market in {{lead.city}} is always evolving, and your home's value might have changed! As a local expert, I'd be happy to provide you with a complimentary, no-obligation home value estimate.\n\nThis personalized report will give you insights into recent sales in your area and current market trends.\n\nJust reply to this email if you'd like to receive yours!\n\nBest regards,\n{{agent.name}}">
                                Home Value Estimate Offer
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Staging Tips"
                                data-template-subject="Maximize Your Home's Appeal: Staging Tips"
                                data-template-body="Hello {{lead.firstName}},\n\nPreparing your home for sale can significantly impact its appeal and final selling price. Here are some essential staging tips to help your property shine:\n\n1. Declutter and Depersonalize\n2. Deep Clean Everything\n3. Enhance Curb Appeal\n4. Optimize Lighting\n\nEven small changes can make a big difference! I can provide more tailored advice during a home walkthrough.\n\nSincerely,\n{{agent.name}}">
                                Staging Tips / How to Prepare the Home
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Seller Market Snapshot"
                                data-template-subject="Your {{lead.city}} Market Snapshot: What Sellers Need to Know"
                                data-template-body="Hi {{lead.firstName}},\n\nUnderstanding the current market is crucial for a successful sale. Here's a quick snapshot of the {{lead.city}} market relevant to sellers:\n\n- Average Days on Market: [X days]\n- Inventory of Homes: [Low/Medium/High]\n- Average Sale Price vs. List Price: [Percentage]\n\nThis data helps us position your home competitively. Let's discuss how these trends impact your selling strategy.\n\nBest,\n{{agent.name}}">
                                Market Snapshot (Seller)
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Pricing Strategy Insights"
                                data-template-subject="Pricing Your Home for Success in {{lead.city}}"
                                data-template-body="Hello {{lead.firstName}},\n\nSetting the right price for your home is one of the most important decisions. Price too high, and you deter buyers; price too low, and you leave money on the table.\n\nMy pricing strategy involves a detailed comparative market analysis (CMA), considering your home's unique features, current market conditions, and recent comparable sales. The goal is to find the 'sweet spot' that attracts maximum buyer interest.\n\nLet's ensure your home is priced perfectly.\n\nSincerely,\n{{agent.name}}">
                                Pricing Strategy Insights
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Photography/Video Checklist"
                                data-template-subject="Get Ready for Your Home's Photoshoot!"
                                data-template-body="Hi {{lead.firstName}},\n\nProfessional photos and videos are essential for attracting buyers online. To prepare your home for its upcoming photoshoot, here's a simple checklist:\n\n- Declutter all surfaces.\n- Open all blinds and curtains.\n- Turn on all lights.\n- Clear kitchen and bathroom counters.\n\nI'll ensure your home looks its absolute best to capture buyer attention!\n\nBest regards,\n{{agent.name}}">
                                Photography/Video Checklist
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Open House Prep"
                                data-template-subject="Preparing for Your Upcoming Open House"
                                data-template-body="Hello {{lead.firstName}},\n\nYour open house is scheduled for [Date] from [Time]! To ensure it's a success and leaves a lasting impression on potential buyers, here are a few preparation tips:\n\n- Ensure your home is sparkling clean.\n- Minimize personal items.\n- Create a welcoming atmosphere.\n- Plan to be away during the open house.\n\nI'll handle all the details to make it a smooth and effective event.\n\nSincerely,\n{{agent.name}}">
                                Open House Prep
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Showing Feedback Requests"
                                data-template-subject="Feedback Request: Your Home Showing"
                                data-template-body="Hi {{lead.firstName}},\n\nYour home at [Property Address] was shown to a potential buyer today. I've reached out to their agent for feedback and will share it with you as soon as I receive it.\n\nYour input is valuable as we navigate the selling process. We're one step closer to finding the right buyer!\n\nBest,\n{{agent.name}}">
                                Showing Feedback Requests
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Negotiation Strategy"
                                data-template-subject="Navigating Offers: Our Negotiation Strategy"
                                data-template-body="Hello {{lead.firstName}},\n\nReceiving an offer on your home is an exciting step! My role is to help you navigate negotiations to secure the best possible terms.\n\nOur strategy will focus on [mention key aspects, e.g., 'analyzing market comps, understanding buyer motivations, and leveraging contingencies']. I'll guide you through every decision to ensure your interests are protected.\n\nLet's get your home sold!\n\nSincerely,\n{{agent.name}}">
                                Negotiation Strategy / Offer Handling
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Post-Close Checklist"
                                data-template-subject="Congratulations! Your Post-Closing Checklist"
                                data-template-body="Hi {{lead.firstName}},\n\nCongratulations on the successful sale of your home! It was a pleasure working with you.\n\nTo help you with the transition, here's a brief post-closing checklist:\n\n- Forward your mail.\n- Transfer utilities.\n- Update your address with relevant institutions.\n\nRemember, my service doesn't end at closing. Please reach out if you have any questions or need recommendations for local services.\n\nBest regards,\n{{agent.name}}">
                                Post-Close Checklist
                            </button>

                            <h4 class="col-span-full font-semibold text-neutral-dark mt-4 mb-2">General Drip / Sphere Campaigns</h4>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Holiday Message (General)"
                                data-template-subject="Happy Holidays from {{agent.name}}!"
                                data-template-body="Hi {{lead.firstName}},\n\nWishing you and your family a wonderful holiday season filled with joy and warmth!\n\nIt's a pleasure to connect with you. If you or anyone you know has real estate needs in the coming year, please don't hesitate to reach out.\n\nHappy Holidays!\n{{agent.name}}">
                                Holiday Messages
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Anniversary Check-In (Purchase)"
                                data-template-subject="Happy Home Anniversary, {{lead.firstName}}!"
                                data-template-body="Hello {{lead.firstName}},\n\nCan you believe it's already been [X] years since you moved into your wonderful home at {{lead.address}}? Time flies when you're enjoying your space!\n\nI hope you're still loving it. If you ever have any questions about the market, or if you're thinking about future real estate plans, I'm always here to help.\n\nHappy Home Anniversary!\n{{agent.name}}">
                                Anniversary Check-Ins (purchase)
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Client Appreciation Event"
                                data-template-subject="You're Invited! Client Appreciation Event"
                                data-template-body="Hi {{lead.firstName}},\n\nAs a valued client, I'd love to invite you to my annual Client Appreciation Event!\n\nJoin me for [Event Details: e.g., 'a fun evening of food, drinks, and good company at [Location] on [Date] at [Time]'.]\n\nIt's my way of saying thank you for your trust and support. Please RSVP by [Date] so I can get a headcount.\n\nLooking forward to seeing you there!\n{{agent.name}}">
                                Client Appreciation Event Invites
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Newsletter with Blog/Market Stats"
                                data-template-subject="Your Monthly Real Estate Insights from {{agent.name}}"
                                data-template-body="Hello {{lead.firstName}},\n\nHere's your monthly dose of real estate insights! In this month's newsletter, I'm covering:\n\n- [Link to Blog Post Title 1]\n- [Link to Market Stat Article 2]\n- [Local Event/News]\n\nI hope you find this information valuable. As always, feel free to reach out with any questions about the market or your real estate goals.\n\nBest regards,\n{{agent.name}}">
                                Newsletter with Blog or Market Stats
                            </button>
                            <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                                data-template-name="Referral Request"
                                data-template-subject="A Quick Question for You, {{lead.firstName}}"
                                data-template-body="Hi {{lead.firstName}},\n\nI hope this email finds you well! I'm reaching out because I truly value your trust and support.\n\nMy business thrives on referrals from amazing clients like you. If you know anyone who might be considering buying or selling a home, I would be incredibly grateful if you would pass my name along.\n\nI promise to provide them with the same high level of service you experienced.\n\nThank you!\n{{agent.name}}">
                                Referral Request / Incentive
                            </button>
                        </div>
                    </div>
                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm mb-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark" id="drip-campaign-form-title">Create New Drip Campaign (Drip)</h3>
                        <form id="drip-create-campaign-form" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <input type="hidden" id="drip-editing-campaign-id">
                            <input type="text" id="drip-campaign-name" placeholder="Campaign Name" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel col-span-full bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            <textarea id="drip-campaign-description" placeholder="Campaign Description" class="p-3 border border-neutral-border rounded-md w-full h-20 focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel col-span-full bg-neutral-light text-neutral-dark placeholder-secondary-text"></textarea>
                            <select id="drip-campaign-trigger" class="p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark">
                                <option value="">Select Trigger</option>
                                <option value="lead-added">Lead Added</option>
                                <option value="status-updated">Status Updated</option>
                                <option value="tag-applied">Tag Applied</option>
                            </select>
                            <div class="col-span-full">
                                <h4 class="font-medium text-neutral-dark mb-2">Campaign Steps:</h4>
                                <div id="drip-campaign-steps-container" class="space-y-3">
                                    <div class="flex items-center gap-2 campaign-step-item"> <input type="number" placeholder="Delay (days)" class="drip-campaign-step-delay p-2 border border-neutral-border rounded-md w-24 bg-neutral-light text-neutral-dark placeholder-secondary-text">
                                        <select class="drip-campaign-step-template p-2 border border-neutral-border rounded-md flex-grow bg-neutral-light text-neutral-dark">
                                            <option value="">Select Email Template</option>
                                            </select>
                                        <button type="button" class="drip-remove-step-button bg-destructive-pastel text-destructive-on-pastel p-2 rounded-md hover:bg-destructive-pastel-darker transition-colors">
                                            <svg class="w-4 h-4 pointer-events-none" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                                        </button>
                                    </div>
                                </div>
                                <button type="button" id="drip-add-campaign-step-button" class="mt-3 bg-neutral-medium text-neutral-dark py-2 px-4 rounded-md hover:bg-neutral-border transition-colors duration-200 text-sm font-medium">Add Step</button>
                            </div>
                            <button type="submit" id="drip-create-campaign-submit-button" class="col-span-full bg-primary-pastel text-primary-on-pastel py-3 px-4 rounded-md hover:bg-primary-pastel-darker transition-colors duration-200 font-semibold">Save Campaign</button>
                        </form>
                    </div>
                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm mb-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark">Existing Email Templates (Drip)</h3>
                        <p class="text-secondary-text mb-4" id="drip-no-templates-message">No templates found. Create one above!</p>
                        <div id="drip-templates-list" class="grid grid-cols-1 gap-4">
                            </div>
                    </div>
                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark">Existing Drip Campaigns (Drip)</h3>
                        <p class="text-secondary-text mb-4" id="drip-no-campaigns-message">No campaigns found. Create one above!</p>
                        <div id="drip-campaigns-list" class="grid grid-cols-1 gap-4">
                            </div>
                    </div>
                     <div class="bg-neutral-light p-6 rounded-lg shadow-sm mt-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark">Campaign Analytics & Performance (Placeholder - Drip)</h3>
                        <p class="text-secondary-text">This section would display metrics like email open rates, click-through rates, and reply rates for each campaign.</p>
                    </div>
                </div>


                <div id="profile-section" class="tab-content hidden">
                    <h2 class="text-xl font-semibold mb-6 text-neutral-dark">User Profile</h2>
                    
                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm mb-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark">Personal Information</h3>
                        <form id="profile-info-form" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label for="profile-username" class="block text-sm font-medium text-neutral-dark">Username (cannot change)</label>
                                <input type="text" id="profile-username" readonly class="mt-1 block w-full p-3 border border-neutral-border rounded-md bg-neutral-medium text-secondary-text cursor-not-allowed">
                            </div>
                            <div>
                                <label for="profile-role" class="block text-sm font-medium text-neutral-dark">Role (cannot change)</label>
                                <input type="text" id="profile-role" readonly class="mt-1 block w-full p-3 border border-neutral-border rounded-md bg-neutral-medium text-secondary-text cursor-not-allowed">
                            </div>
                            <div>
                                <label for="profile-first-name" class="block text-sm font-medium text-neutral-dark">First Name</label>
                                <input type="text" id="profile-first-name" class="mt-1 block w-full p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            </div>
                            <div>
                                <label for="profile-last-name" class="block text-sm font-medium text-neutral-dark">Last Name</label>
                                <input type="text" id="profile-last-name" class="mt-1 block w-full p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            </div>
                            <div class="md:col-span-2">
                                <label for="profile-email" class="block text-sm font-medium text-neutral-dark">Email</label>
                                <input type="email" id="profile-email" class="mt-1 block w-full p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            </div>
                            <div class="md:col-span-2">
                                <label for="profile-phone" class="block text-sm font-medium text-neutral-dark">Phone</label>
                                <input type="tel" id="profile-phone" class="mt-1 block w-full p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            </div>
                            <h4 class="md:col-span-2 text-md font-medium text-neutral-dark mt-2">Social Links</h4>
                            <div>
                                <label for="profile-facebook" class="block text-sm font-medium text-neutral-dark">Facebook URL</label>
                                <input type="url" id="profile-facebook" placeholder="https://facebook.com/yourprofile" class="mt-1 block w-full p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            </div>
                            <div>
                                <label for="profile-instagram" class="block text-sm font-medium text-neutral-dark">Instagram URL</label>
                                <input type="url" id="profile-instagram" placeholder="https://instagram.com/yourprofile" class="mt-1 block w-full p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            </div>
                            <div>
                                <label for="profile-tiktok" class="block text-sm font-medium text-neutral-dark">TikTok URL</label>
                                <input type="url" id="profile-tiktok" placeholder="https://tiktok.com/@yourprofile" class="mt-1 block w-full p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            </div>
                             <div>
                                <label for="profile-calendar-link" class="block text-sm font-medium text-neutral-dark">Calendar Booking Link</label>
                                <input type="url" id="profile-calendar-link" placeholder="https://calendly.com/yourlink" class="mt-1 block w-full p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            </div>
                            <button type="submit" class="md:col-span-2 bg-primary-pastel text-primary-on-pastel py-3 px-4 rounded-md hover:bg-primary-pastel-darker transition-colors duration-200 font-semibold">Save Profile Changes</button>
                        </form>
                    </div>

                    <div class="bg-neutral-light p-6 rounded-lg shadow-sm mb-6 border border-neutral-border">
                        <h3 class="text-lg font-medium mb-4 text-neutral-dark">Change Password</h3>
                        <form id="change-password-form" class="space-y-4">
                            <div>
                                <label for="current-password" class="block text-sm font-medium text-neutral-dark">Current Password</label>
                                <input type="password" id="current-password" required class="mt-1 block w-full p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            </div>
                            <div>
                                <label for="new-password" class="block text-sm font-medium text-neutral-dark">New Password</label>
                                <input type="password" id="new-password" required class="mt-1 block w-full p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            </div>
                            <div>
                                <label for="confirm-new-password" class="block text-sm font-medium text-neutral-dark">Confirm New Password</label>
                                <input type="password" id="confirm-new-password" required class="mt-1 block w-full p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                            </div>
                            <button type="submit" class="bg-primary-pastel text-primary-on-pastel py-3 px-4 rounded-md hover:bg-primary-pastel-darker transition-colors duration-200 font-semibold">Change Password</button>
                        </form>
                    </div>

                    <div id="admin-user-management-section" class="hidden bg-neutral-light p-6 rounded-lg shadow-sm border border-neutral-border">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-lg font-medium text-neutral-dark">User Management</h3>
                            <button id="admin-add-user-button" class="bg-success-pastel text-success-on-pastel py-2 px-4 rounded-md hover:bg-success-pastel-darker transition-colors duration-200 font-semibold">Add New User</button>
                        </div>
                        <div id="admin-users-list" class="space-y-3">
                            </div>
                    </div>
                </div>

            </main>

            <div id="task-detail-modal" class="fixed inset-0 bg-neutral-dark bg-opacity-75 flex items-center justify-center z-50 hidden">
                <div class="modal-content">
                    <button id="close-task-modal" class="absolute top-3 right-3 text-secondary-text hover:text-neutral-dark text-2xl font-bold">&times;</button>
                    <h3 id="modal-task-title" class="text-2xl font-bold text-neutral-dark mb-4"></h3>
                    <p class="text-neutral-dark mb-2"><strong>Description:</strong> <span id="modal-task-description" class="text-secondary-text"></span></p>
                    <p class="text-neutral-dark mb-2"><strong>Status:</strong> <span id="modal-task-status" class="font-medium"></span></p>
                    <p class="text-neutral-dark mb-2"><strong>Due Date:</strong> <span id="modal-task-due-date"></span></p>
                    <p class="text-neutral-dark mb-2"><strong>Assigned To:</strong> <span id="modal-task-assigned-to"></span></p>
                    <p class="text-neutral-dark mb-4"><strong>Related Lead:</strong> <span id="modal-task-related-lead"></span></p>
                    <button id="modal-view-full-details" class="bg-primary-pastel text-primary-on-pastel py-3 px-4 rounded-md hover:bg-primary-pastel-darker transition-colors duration-200 font-semibold">View Full Details in Tasks Tab</button>
                </div>
            </div>
            
            <div id="lead-status-change-modal" class="fixed inset-0 bg-neutral-dark bg-opacity-75 flex items-center justify-center z-[65] hidden">
                <div class="modal-content">
                    <button id="close-lead-status-modal" class="absolute top-3 right-3 text-secondary-text hover:text-neutral-dark text-2xl font-bold">&times;</button>
                    <h3 class="text-xl font-bold text-neutral-dark mb-4">Change Lead Status</h3>
                    <p class="text-neutral-dark mb-2">Lead: <span id="modal-lead-name" class="font-semibold"></span></p>
                    <div class="mt-4">
                        <label for="modal-new-lead-status" class="block text-sm font-medium text-neutral-dark mb-1">New Status:</label>
                        <select id="modal-new-lead-status" class="p-3 border border-neutral-border rounded-md w-full focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark">
                            </select>
                    </div>
                    <div class="mt-6 flex justify-end gap-4">
                        <button id="cancel-lead-status-change" class="px-4 py-2 rounded-md bg-neutral-medium text-neutral-dark hover:bg-neutral-border transition-colors">Cancel</button>
                        <button id="confirm-lead-status-change" class="px-4 py-2 rounded-md bg-primary-pastel text-primary-on-pastel hover:bg-primary-pastel-darker transition-colors">Save Status</button>
                    </div>
                </div>
            </div>

            <div id="admin-user-modal" class="fixed inset-0 bg-neutral-dark bg-opacity-75 flex items-center justify-center z-[70] hidden">
                <div class="modal-content">
                    <button id="close-admin-user-modal" class="absolute top-3 right-3 text-secondary-text hover:text-neutral-dark text-2xl font-bold">&times;</button>
                    <h3 id="admin-user-modal-title" class="text-xl font-bold text-neutral-dark mb-4">Add New User</h3>
                    <form id="admin-user-form" class="space-y-4">
                        <input type="hidden" id="editing-user-id-admin">
                        <div>
                            <label for="admin-user-username" class="block text-sm font-medium text-neutral-dark">Username</label>
                            <input type="text" id="admin-user-username" required class="mt-1 block w-full p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                        </div>
                        <div>
                            <label for="admin-user-email" class="block text-sm font-medium text-neutral-dark">Email</label>
                            <input type="email" id="admin-user-email" required class="mt-1 block w-full p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                        </div>
                        <div>
                            <label for="admin-user-password" class="block text-sm font-medium text-neutral-dark">Password</label>
                            <input type="password" id="admin-user-password" placeholder="Leave blank to keep existing" class="mt-1 block w-full p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark placeholder-secondary-text">
                        </div>
                         <div>
                            <label for="admin-user-role" class="block text-sm font-medium text-neutral-dark">Role</label>
                            <select id="admin-user-role" required class="mt-1 block w-full p-3 border border-neutral-border rounded-md focus:ring-2 focus:ring-primary-pastel focus:border-primary-pastel bg-neutral-light text-neutral-dark">
                                <option value="user">User</option>
                                <option value="admin">Admin</option>
                            </select>
                        </div>
                        <div class="flex justify-end gap-4 pt-2">
                            <button type="button" id="cancel-admin-user-form" class="px-4 py-2 rounded-md bg-neutral-medium text-neutral-dark hover:bg-neutral-border transition-colors">Cancel</button>
                            <button type="submit" id="save-admin-user-button" class="px-4 py-2 rounded-md bg-success-pastel text-success-on-pastel hover:bg-success-pastel-darker transition-colors">Save User</button>
                        </div>
                    </form>
                </div>
            </div>


             <div id="confirmation-modal" class="fixed inset-0 bg-neutral-dark bg-opacity-75 flex items-center justify-center z-[80] hidden">
                <div class="modal-content">
                    <h3 id="confirmation-title" class="text-xl font-bold text-neutral-dark mb-4">Confirm Action</h3>
                    <p id="confirmation-message" class="text-neutral-dark mb-6"></p>
                    <div class="flex justify-end gap-4">
                        <button id="confirm-cancel-button" class="px-4 py-2 rounded-md bg-neutral-medium text-neutral-dark hover:bg-neutral-border transition-colors">Cancel</button>
                        <button id="confirm-action-button" class="px-4 py-2 rounded-md bg-destructive-pastel text-destructive-on-pastel hover:bg-destructive-pastel-darker transition-colors">Confirm</button>
                    </div>
                </div>
            </div>

            <div id="about-modal" class="fixed inset-0 bg-neutral-dark bg-opacity-75 flex items-center justify-center z-[85] hidden">
                <div class="modal-content max-w-md">
                    <button id="close-about-modal" class="absolute top-3 right-3 text-secondary-text hover:text-neutral-dark text-2xl font-bold">&times;</button>
                    <h3 class="text-xl font-bold text-neutral-dark mb-4">About This CRM</h3>
                    <img src="https://dwellverse.io/wp-content/uploads/2025/06/READY-RE-Business-Card-Back_FINAL-1.png" alt="Dwellverse.io Logo" class="w-auto max-w-[200px] h-auto max-h-[60px] mx-auto mb-4 rounded-md" onerror="this.onerror=null;this.src='https://placehold.co/200x60/FFFFFF/003366?text=Logo';">
                    <p class="text-neutral-dark mb-2 text-sm">This Real Estate CRM was developed by <strong class="text-primary-pastel">James Ian Oliver</strong> for <strong class="text-primary-pastel">Dwellverse.io</strong>.</p>
                    <p class="text-neutral-dark text-xs">&copy; ${new Date().getFullYear()} Dwellverse.io. All Rights Reserved.</p>
                    <div class="mt-6 flex justify-end">
                        <button id="about-modal-close-button" class="px-4 py-2 rounded-md bg-primary-pastel text-primary-on-pastel hover:bg-primary-pastel-darker transition-colors">Close</button>
                    </div>
                </div>
            </div>

        </div> 

        <div id="message-box" class="fixed bottom-4 right-4 p-4 rounded-lg shadow-lg z-[90] hidden">
            <p id="message-content" class="text-white"></p>
            <button id="close-message-box" class="absolute top-1 right-2 text-white text-lg font-bold">&times;</button>
        </div>
    </div>

    <script type="module">
        // Import SortableJS for drag-and-drop functionality in Kanban board
        import Sortable from 'https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/modular/sortable.esm.js';
        // Register the datalabels plugin with Chart.js
        Chart.register(ChartDataLabels);


        // --- Global Variables & Constants ---
        let mockUsers = []; 
        let currentUser = null; 
        let leads = []; 
        let tasks = []; 
        let emailTemplates = []; 
        let dripCampaigns = []; 
        // For Drip Section (duplicated from Emails)
        let dripEmailTemplates = [];
        let dripDripCampaigns = [];
        let currentEditingDripTemplateId = null;
        let currentEditingDripCampaignId = null;

        let kanbanSortableInstances = []; 
        let currentCalendarFilter = 'All'; 
        let currentLeadsFilter = 'All'; 
        let currentTasksFilter = 'All'; 
        let dashboardUpcomingTasksFilter = 'All'; 
        let currentEditingLeadId = null; 
        let currentEditingTaskId = null; 
        let currentEditingTemplateId = null; 
        let currentEditingCampaignId = null; 
        let currentLeadToChangeStatus = null; 
        let currentEditingAdminUserId = null; 
        let leadStatusRingChartInstance = null; 
        let taskStatusRingChartInstance = null; 

        const buyerLeadKanbanStatuses = [
            "New Lead", "Contacted", "Qualified", "Showing Scheduled",
            "Offer Made", "Under Contract", "Closed", "Lost / Inactive"
        ];
        const activeKanbanStatuses = buyerLeadKanbanStatuses;
        const allTaskStatusesForChart = ["New", "Pending", "In Progress", "Completed", "Deferred"];


        // --- Utility Functions ---
        const generateId = () => '_' + Math.random().toString(36).substr(2, 9);
        const getLocalTimestamp = () => ({ toDate: () => new Date() });

        // --- Message Box Logic ---
        function showMessage(message, type = 'info') {
            const messageBox = document.getElementById('message-box');
            const messageContent = document.getElementById('message-content');
            if (!messageBox || !messageContent) { console.error("Message box elements not found"); return; }
            messageContent.textContent = message;
            messageBox.className = `fixed bottom-4 right-4 p-4 rounded-lg shadow-lg z-[90] text-white`; 
            if (type === 'error') {
                messageBox.classList.add('bg-destructive-pastel', 'text-destructive-on-pastel');
            } else if (type === 'success') {
                messageBox.classList.add('bg-success-pastel', 'text-success-on-pastel');
            } else { 
                messageBox.classList.add('bg-neutral-dark'); 
            }
            messageBox.classList.remove('hidden');
            setTimeout(() => {
                messageBox.classList.add('hidden');
            }, 3000);
        }
        
        // --- Confirmation Modal Logic ---
        let confirmResolve = null; 
        const showConfirmationModal = (title, message) => {
            return new Promise((resolve) => {
                const modal = document.getElementById('confirmation-modal'); 
                const titleEl = document.getElementById('confirmation-title');
                const messageEl = document.getElementById('confirmation-message');
                if (!modal || !titleEl || !messageEl) { 
                    console.error("Confirmation modal elements not found");
                    resolve(false); return; 
                }
                confirmResolve = resolve;
                titleEl.textContent = title;
                messageEl.textContent = message;
                modal.classList.remove('hidden');
            });
        };
        
        // --- Initialization ---
        const initializeApp = async () => {
            initializeMockUsers(); 
            await seedMockData(); 

            attachStaticEventListeners(); 
            attachAuthEventListeners(); 

            const loginScreen = document.getElementById('login-screen');
            const mainAppContent = document.getElementById('main-app-content');
            const loadingSpinner = document.getElementById('loading-spinner');

            if(loginScreen) loginScreen.classList.remove('hidden');
            if(mainAppContent) mainAppContent.classList.add('hidden');
            if(loadingSpinner) loadingSpinner.classList.add('hidden');
        };
        const initializeMockUsers = () => {
            const storedUsers = localStorage.getItem('crm_users_v1');
            if (storedUsers) {
                mockUsers = JSON.parse(storedUsers);
            } else {
                mockUsers = [
                    {
                        id: generateId(), username: 'admin', password: 'password123', role: 'admin',
                        firstName: 'Admin', lastName: 'User', email: 'admin@example.com', phone: '555-0100',
                        socialLinks: { facebook: '', instagram: '', tiktok: '' }, calendarLink: '',
                        avatarUrl: 'https://placehold.co/100x100/A7C7E7/003366?text=A'
                    },
                    {
                        id: generateId(), username: 'user', password: 'password123', role: 'user',
                        firstName: 'Regular', lastName: 'User', email: 'user@example.com', phone: '555-0101',
                        socialLinks: { facebook: '', instagram: '', tiktok: '' }, calendarLink: '',
                        avatarUrl: 'https://placehold.co/100x100/AEE0AE/004d00?text=U'
                    }
                ];
                saveUsersToLocalStorage(); 
            }
        };
        const saveUsersToLocalStorage = () => {
            localStorage.setItem('crm_users_v1', JSON.stringify(mockUsers));
        };

        const attachAuthEventListeners = () => {
            const loginForm = document.getElementById('login-form');
            if (loginForm) {
                loginForm.addEventListener('submit', handleLogin);
            } else {
                console.error("Login form not found for event listener attachment.");
            }
            const logoutButton = document.getElementById('logout-button');
            if (logoutButton) {
                logoutButton.addEventListener('click', handleLogout);
            } else {
                console.error("Logout button not found for event listener attachment.");
            }
        };
        const handleLogin = (e) => {
            e.preventDefault(); 
            const usernameInput = document.getElementById('username').value;
            const passwordInput = document.getElementById('password').value;
            const loginErrorMsg = document.getElementById('login-error-message');

            const foundUser = mockUsers.find(u => u.username === usernameInput && u.password === passwordInput);

            if (foundUser) {
                currentUser = { ...foundUser }; 
                if(loginErrorMsg) loginErrorMsg.classList.add('hidden'); 
                document.getElementById('login-screen')?.classList.add('hidden');
                document.getElementById('main-app-content')?.classList.remove('hidden');
                const sidebarTitle = document.getElementById('sidebar-crm-title');
                if(sidebarTitle) sidebarTitle.textContent = `${currentUser.firstName}'s CRM`; 
                renderAllSections(); 
                showMessage(`Welcome back, ${currentUser.firstName}!`, 'success');
            } else {
                if(loginErrorMsg) {
                    loginErrorMsg.textContent = 'Invalid username or password.';
                    loginErrorMsg.classList.remove('hidden');
                }
                showMessage('Login failed. Please check your credentials.', 'error');
            }
        };
        const handleLogout = () => {
            currentUser = null; 
            document.getElementById('main-app-content')?.classList.add('hidden');
            document.getElementById('login-screen')?.classList.remove('hidden');
            const loginForm = document.getElementById('login-form');
            if(loginForm) loginForm.reset(); 
            showMessage("You have been logged out.", "info");
        };

        const attachStaticEventListeners = () => {
            const closeMessageBoxButton = document.getElementById('close-message-box');
            if (closeMessageBoxButton) {
                closeMessageBoxButton.addEventListener('click', () => {
                    document.getElementById('message-box')?.classList.add('hidden');
                });
            }

            const confirmCancelButton = document.getElementById('confirm-cancel-button');
            if (confirmCancelButton) {
                confirmCancelButton.addEventListener('click', () => {
                    document.getElementById('confirmation-modal')?.classList.add('hidden');
                    if (confirmResolve) confirmResolve(false);
                });
            }
            const confirmActionButton = document.getElementById('confirm-action-button');
            if (confirmActionButton) {
                confirmActionButton.addEventListener('click', () => {
                    document.getElementById('confirmation-modal')?.classList.add('hidden');
                    if (confirmResolve) confirmResolve(true);
                });
            }
            
            document.getElementById('add-lead-form')?.addEventListener('submit', (e) => { 
                e.preventDefault();
                const leadData = {
                    firstName: document.getElementById('lead-first-name').value.trim(),
                    lastName: document.getElementById('lead-last-name').value.trim(),
                    email: document.getElementById('lead-email').value.trim(),
                    phone: document.getElementById('lead-phone').value.trim(),
                    leadSource: document.getElementById('lead-source').value.trim(),
                    leadType: document.getElementById('lead-type').value,
                    status: document.getElementById('lead-status').value, 
                    tags: document.getElementById('lead-tags').value.split(',').map(tag => tag.trim()).filter(tag => tag), 
                    company: document.getElementById('lead-company').value.trim(),
                    jobTitle: document.getElementById('lead-job-title').value.trim(),
                    address: document.getElementById('lead-address').value.trim(),
                    city: document.getElementById('lead-city').value.trim(),
                    state: document.getElementById('lead-state').value.trim(),
                    zip: document.getElementById('lead-zip').value.trim(),
                    country: document.getElementById('lead-country').value.trim(),
                    notes: document.getElementById('lead-notes').value.trim(),
                    facebook: document.getElementById('lead-facebook').value.trim(),
                    instagram: document.getElementById('lead-instagram').value.trim(),
                    tiktok: document.getElementById('lead-tiktok').value.trim(),
                };

                if (!leadData.firstName || !leadData.lastName || !leadData.status || !leadData.leadType) {
                    showMessage("First Name, Last Name, Status, and Lead Type are required.", "error");
                    return;
                }
                if (!currentEditingLeadId && leadData.leadType === "Buyer" && !activeKanbanStatuses.includes(leadData.status)) {
                     leadData.status = "New Lead"; 
                }

                if (currentEditingLeadId) { 
                    const leadIndex = leads.findIndex(l => l.id === currentEditingLeadId);
                    if (leadIndex > -1) {
                        leads[leadIndex] = { ...leads[leadIndex], ...leadData, createdBy: leads[leadIndex].createdBy, createdAt: leads[leadIndex].createdAt };
                        showMessage("Lead updated successfully!", "success");
                    }
                    currentEditingLeadId = null; 
                    document.getElementById('lead-form-title').textContent = "Add New Lead";
                    document.getElementById('add-lead-submit-button').textContent = "Add Lead";
                } else { 
                    const newLead = {
                        ...leadData,
                        id: generateId(),
                        createdBy: currentUser ? currentUser.username : 'system', 
                        createdAt: getLocalTimestamp().toDate().toISOString() 
                    };
                    leads.push(newLead);
                    showMessage("Lead added successfully!", "success");
                }
                renderAllSections(); 
                e.target.reset(); 
                document.getElementById('editing-lead-id').value = ''; 
            });
            document.getElementById('quick-add-lead-form')?.addEventListener('submit', (e) => {  
                e.preventDefault();
                const newLead = {
                    id: generateId(),
                    firstName: document.getElementById('quick-lead-first-name').value.trim(),
                    lastName: document.getElementById('quick-lead-last-name').value.trim(),
                    email: document.getElementById('quick-lead-email').value.trim(),
                    phone: document.getElementById('quick-lead-phone').value.trim(),
                    leadSource: 'Quick Entry', leadType: 'Buyer', status: 'New Lead', tags: [],
                    notes: 'Quick entry from dashboard.',
                    createdBy: currentUser ? currentUser.username : 'system', createdAt: getLocalTimestamp().toDate().toISOString()
                };
                if (!newLead.firstName || !newLead.lastName) {
                    showMessage("First Name and Last Name are required.", "error"); return;
                }
                leads.push(newLead);
                renderAllSections(); 
                showMessage("Quick Lead added successfully!", "success");
                e.target.reset(); 
            });
            document.getElementById('add-task-form')?.addEventListener('submit', (e) => {  
                e.preventDefault();
                const taskData = {
                    title: document.getElementById('task-title').value.trim(),
                    description: document.getElementById('task-description').value.trim(),
                    dueDate: document.getElementById('task-due-date').value,
                    relatedLeadId: document.getElementById('task-related-lead').value, 
                    status: document.getElementById('task-status').value,
                };

                if (!taskData.title || !taskData.dueDate || !taskData.status || !taskData.relatedLeadId) {
                    showMessage("Title, Due Date, Related Lead, and Status are required for a task.", "error"); return;
                }

                if (currentEditingTaskId) { 
                    const taskIndex = tasks.findIndex(t => t.id === currentEditingTaskId);
                    if (taskIndex > -1) {
                        tasks[taskIndex] = { ...tasks[taskIndex], ...taskData, assignedTo: tasks[taskIndex].assignedTo, createdAt: tasks[taskIndex].createdAt };
                        showMessage("Task updated successfully!", "success");
                    }
                    currentEditingTaskId = null; 
                    document.getElementById('task-form-title').textContent = "Add New Task";
                    document.getElementById('add-task-submit-button').textContent = "Add Task";
                } else { 
                    const newTask = {
                        ...taskData,
                        id: generateId(),
                        assignedTo: currentUser ? currentUser.username : 'system', 
                        createdAt: getLocalTimestamp().toDate().toISOString() 
                    };
                    tasks.push(newTask);
                    showMessage("Task added successfully!", "success");
                }
                renderAllSections(); 
                e.target.reset(); 
                document.getElementById('editing-task-id').value = ''; 
            });
            document.getElementById('create-template-form')?.addEventListener('submit', (e) => {  e.preventDefault(); /* ... */ });
            document.getElementById('create-campaign-form')?.addEventListener('submit', (e) => {  e.preventDefault(); /* ... */ });
            document.getElementById('profile-info-form')?.addEventListener('submit', handleUpdateProfile);
            document.getElementById('change-password-form')?.addEventListener('submit', handleChangePassword);
            document.getElementById('admin-user-form')?.addEventListener('submit', handleSaveAdminUser);

            // Drip Section Form Listeners
            document.getElementById('drip-create-template-form')?.addEventListener('submit', handleSaveDripEmailTemplate);
            document.getElementById('drip-create-campaign-form')?.addEventListener('submit', handleSaveDripDripCampaign);
            document.getElementById('drip-add-campaign-step-button')?.addEventListener('click', () => addDripCampaignStep(document.getElementById('drip-campaign-steps-container')));


            document.getElementById('import-csv-button')?.addEventListener('click', () => { /* ... */ });
            document.getElementById('dashboard-quick-add-task-button')?.addEventListener('click', () => {
                document.getElementById('tasks-tab')?.click(); 
                const taskTitleInput = document.getElementById('task-title');
                if (taskTitleInput) {
                    taskTitleInput.value = ''; 
                    taskTitleInput.focus();
                }
                document.getElementById('task-description').value = '';
                const today = new Date();
                today.setDate(today.getDate() + 1); 
                document.getElementById('task-due-date').value = today.toISOString().split('T')[0];
                document.getElementById('task-status').value = 'New'; 
                document.getElementById('task-related-lead').value = ""; 
                showMessage("Switched to Tasks tab. Ready to add a new task.", "info");
            });
            document.getElementById('export-ical-button')?.addEventListener('click', () => { /* ... */ });
            document.getElementById('add-campaign-step-button')?.addEventListener('click', () => { /* ... */ });
            document.querySelector('#campaign-steps-container .remove-step-button')?.addEventListener('click', (e) => {
                 e.target.closest('.campaign-step-item').remove();
            });
            document.getElementById('admin-add-user-button')?.addEventListener('click', openAdminUserModalForAdd);
            
            document.getElementById('close-lead-status-modal')?.addEventListener('click', () => { /* ... */ });
            document.getElementById('cancel-lead-status-change')?.addEventListener('click', () => { /* ... */ });
            document.getElementById('confirm-lead-status-change')?.addEventListener('click', () => { /* ... */ });
            document.getElementById('close-admin-user-modal')?.addEventListener('click', () => { /* ... */ });
            document.getElementById('cancel-admin-user-form')?.addEventListener('click', () => { /* ... */ });
            document.getElementById('close-task-modal')?.addEventListener('click', () => { /* ... */ });
             document.getElementById('modal-view-full-details')?.addEventListener('click', () => { /* ... */ });

            document.getElementById('header-main-logo')?.addEventListener('click', () => {
                document.getElementById('about-modal')?.classList.remove('hidden');
            });
            document.getElementById('close-about-modal')?.addEventListener('click', () => {
                document.getElementById('about-modal')?.classList.add('hidden');
            });
             document.getElementById('about-modal-close-button')?.addEventListener('click', () => {
                document.getElementById('about-modal')?.classList.add('hidden');
            });


            document.querySelectorAll('.quick-task-button').forEach(button => {
                button.addEventListener('click', (e) => { 
                    const title = e.target.dataset.title;
                    const description = e.target.dataset.description;
                    document.getElementById('task-title').value = title;
                    document.getElementById('task-description').value = description;
                    const tomorrow = new Date();
                    tomorrow.setDate(tomorrow.getDate() + 1);
                    document.getElementById('task-due-date').value = tomorrow.toISOString().split('T')[0];
                    document.getElementById('task-status').value = 'New';
                    document.getElementById('task-related-lead').value = ""; 
                    showMessage("Task form pre-filled. Please select a related lead.", "info");
                    document.getElementById('task-related-lead').focus(); 
                });
            });

            document.querySelectorAll('.calendar-filter-button').forEach(button => {
                button.addEventListener('click', (e) => { 
                    currentCalendarFilter = e.target.dataset.filter;
                    renderCalendar(currentCalendarFilter); 
                });
            });

            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');
            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    tabButtons.forEach(btn => btn.classList.remove('active', 'bg-sidebar-active'));
                    tabContents.forEach(content => content.classList.add('hidden'));
                    button.classList.add('active', 'bg-sidebar-active');
                    
                    let targetId = button.id.replace('-tab', '-section');
                    // if (button.id === 'drip-tab') { // No longer needed, drip has its own section
                    //     targetId = 'emails-section';
                    // }

                    const targetContent = document.getElementById(targetId);
                    if (targetContent) targetContent.classList.remove('hidden');

                    if (targetId !== 'profile-section') {
                        // Reset forms for 'emails' section
                        currentEditingTemplateId = null; 
                        document.getElementById('editing-template-id').value = '';
                        document.getElementById('template-form-title').textContent = "Create New Email Template";
                        document.getElementById('create-template-submit-button').textContent = "Save Template";
                        document.getElementById('create-template-form').reset();

                        currentEditingCampaignId = null; 
                        document.getElementById('editing-campaign-id').value = '';
                        document.getElementById('campaign-form-title').textContent = "Create New Drip Campaign";
                        document.getElementById('create-campaign-submit-button').textContent = "Save Campaign";
                        document.getElementById('create-campaign-form').reset();
                        document.getElementById('campaign-steps-container').innerHTML = createCampaignStepHTML(); // Reset steps
                        populateCampaignTemplateDropdowns(document.getElementById('campaign-steps-container'));
                        document.querySelector('#campaign-steps-container .remove-step-button')?.addEventListener('click', (ev) => ev.target.closest('.campaign-step-item').remove());


                        // Reset forms for 'drip' section
                        currentEditingDripTemplateId = null;
                        const dripEditingTemplateIdEl = document.getElementById('drip-editing-template-id');
                        if(dripEditingTemplateIdEl) dripEditingTemplateIdEl.value = '';
                        const dripTemplateFormTitleEl = document.getElementById('drip-template-form-title');
                        if(dripTemplateFormTitleEl) dripTemplateFormTitleEl.textContent = "Create New Email Template (Drip)";
                        const dripCreateTemplateSubmitButtonEl = document.getElementById('drip-create-template-submit-button');
                        if(dripCreateTemplateSubmitButtonEl) dripCreateTemplateSubmitButtonEl.textContent = "Save Template";
                        const dripCreateTemplateFormEl = document.getElementById('drip-create-template-form');
                        if(dripCreateTemplateFormEl) dripCreateTemplateFormEl.reset();
                        
                        currentEditingDripCampaignId = null;
                        const dripEditingCampaignIdEl = document.getElementById('drip-editing-campaign-id');
                        if(dripEditingCampaignIdEl) dripEditingCampaignIdEl.value = '';
                        const dripCampaignFormTitleEl = document.getElementById('drip-campaign-form-title');
                        if(dripCampaignFormTitleEl) dripCampaignFormTitleEl.textContent = "Create New Drip Campaign (Drip)";
                        const dripCreateCampaignSubmitButtonEl = document.getElementById('drip-create-campaign-submit-button');
                        if(dripCreateCampaignSubmitButtonEl) dripCreateCampaignSubmitButtonEl.textContent = "Save Campaign";
                        const dripCreateCampaignFormEl = document.getElementById('drip-create-campaign-form');
                        if(dripCreateCampaignFormEl) dripCreateCampaignFormEl.reset();
                        
                        const dripCampaignStepsContainerEl = document.getElementById('drip-campaign-steps-container');
                        if(dripCampaignStepsContainerEl) {
                            dripCampaignStepsContainerEl.innerHTML = createDripCampaignStepHTML(); 
                            populateDripCampaignTemplateDropdowns(dripCampaignStepsContainerEl);
                            dripCampaignStepsContainerEl.querySelector('.drip-remove-step-button')?.addEventListener('click', (ev) => ev.target.closest('.campaign-step-item').remove());
                        }


                        // Reset other forms (lead, task)
                        currentEditingLeadId = null; 
                        const editingLeadIdEl = document.getElementById('editing-lead-id');
                        if(editingLeadIdEl) editingLeadIdEl.value = '';
                        const leadFormTitleEl = document.getElementById('lead-form-title');
                        if(leadFormTitleEl) leadFormTitleEl.textContent = "Add New Lead";
                        const addLeadSubmitButtonEl = document.getElementById('add-lead-submit-button');
                        if(addLeadSubmitButtonEl) addLeadSubmitButtonEl.textContent = "Add Lead";
                        const addLeadFormEl = document.getElementById('add-lead-form');
                        if(addLeadFormEl) addLeadFormEl.reset();

                        currentEditingTaskId = null; 
                        const editingTaskIdEl = document.getElementById('editing-task-id');
                        if(editingTaskIdEl) editingTaskIdEl.value = '';
                        const taskFormTitleEl = document.getElementById('task-form-title');
                        if(taskFormTitleEl) taskFormTitleEl.textContent = "Add New Task";
                        const addTaskSubmitButtonEl = document.getElementById('add-task-submit-button');
                        if(addTaskSubmitButtonEl) addTaskSubmitButtonEl.textContent = "Add Task";
                        const addTaskFormEl = document.getElementById('add-task-form');
                        if(addTaskFormEl) addTaskFormEl.reset();
                    }

                    // Re-render the active tab's content
                    if (targetId === 'dashboard-section') renderDashboard();
                    else if (targetId === 'leads-section') renderLeads(currentLeadsFilter);
                    else if (targetId === 'kanban-section') renderKanbanBoard();
                    else if (targetId === 'calendar-section') renderCalendar(currentCalendarFilter);
                    else if (targetId === 'tasks-section') renderTasks(currentTasksFilter);
                    else if (targetId === 'emails-section') renderEmailMarketingSection();
                    else if (targetId === 'drip-section') renderDripSection(); 
                    else if (targetId === 'profile-section') renderProfileSection();
                });
            });

            const themeToggle = document.getElementById('theme-toggle');
            if (themeToggle) {
                themeToggle.addEventListener('click', () => {
                    const newTheme = document.documentElement.classList.contains('dark') ? 'light' : 'dark';
                    applyTheme(newTheme);
                });
            }
        };

        const seedMockData = async () => {
            const dataVersionKey = 'mockDataSeeded_v4_2'; 
            const leadsStorageKey = 'crm_leads_v4_2';
            const tasksStorageKey = 'crm_tasks_v4_2';
            const emailTemplatesStorageKey = 'crm_emailTemplates_v4_2';
            const dripCampaignsStorageKey = 'crm_dripCampaigns_v4_2';
            const dripEmailTemplatesStorageKey = 'crm_drip_emailTemplates_v4_2';
            const dripDripCampaignsStorageKey = 'crm_drip_dripCampaigns_v4_2';

            let needsSeeding = true; 

            if (localStorage.getItem(dataVersionKey)) {
                console.log("Data version key found. Attempting to load data...");
                leads = JSON.parse(localStorage.getItem(leadsStorageKey)) || [];
                tasks = JSON.parse(localStorage.getItem(tasksStorageKey)) || [];
                emailTemplates = JSON.parse(localStorage.getItem(emailTemplatesStorageKey)) || [];
                dripCampaigns = JSON.parse(localStorage.getItem(dripCampaignsStorageKey)) || [];
                dripEmailTemplates = JSON.parse(localStorage.getItem(dripEmailTemplatesStorageKey)) || [];
                dripDripCampaigns = JSON.parse(localStorage.getItem(dripDripCampaignsStorageKey)) || [];

                if (leads.length >= 15 && tasks.length >= 13) { 
                    console.log("Sufficient mock data (v4.2) already loaded from localStorage.");
                    needsSeeding = false;
                } else {
                    console.log("Data from localStorage is insufficient or missing. Re-seeding.");
                    leads = []; tasks = []; emailTemplates = []; dripCampaigns = []; 
                    dripEmailTemplates = []; dripDripCampaigns = []; 
                }
            }

            if (needsSeeding) {
                showMessage("Seeding mock data (v4.2)...", "info");
                leads = [
                    {
                        id: generateId(), firstName: "Olivia", lastName: "Miller", email: "olivia.m@example.com", phone: "+1234567890",
                        leadSource: "Instagram Ad", leadType: "Buyer", status: "New Lead", tags: ["Luxury Condo", "Downtown"],
                        company: "Art Gallery", jobTitle: "Curator", address: "1200 Congress Ave", city: "Austin", state: "TX", zip: "78701", country: "USA",
                        notes: "Looking for a 2-bed luxury condo with city views. Budget $1.2M.", facebook: "", instagram: "https://ig.com/olivia", tiktok: "",
                        createdBy: "admin", createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), firstName: "Liam", lastName: "Garcia", email: "liam.g@example.com", phone: "+1345678901",
                        leadSource: "Referral (Jane Doe)", leadType: "Seller", status: "Contacted", tags: ["Relocating", "Quick Sale"],
                        company: "Tech Startup Inc.", jobTitle: "Software Engineer", address: "456 Zilker Park Rd", city: "Austin", state: "TX", zip: "78704", country: "USA",
                        notes: "Moving to California in 2 months. Needs to sell his 3-bed house quickly.", facebook: "https://fb.com/liam", instagram: "", tiktok: "",
                        createdBy: "user", createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), firstName: "Sophia", lastName: "Rodriguez", email: "sophia.r@example.com", phone: "+1456789012",
                        leadSource: "Zillow", leadType: "Buyer", status: "Qualified", tags: ["First-time Buyer", "Mueller Area"],
                        company: "Local Bakery", jobTitle: "Owner", address: "789 E 51st St", city: "Austin", state: "TX", zip: "78723", country: "USA",
                        notes: "Pre-approved for $450k. Very interested in townhomes in Mueller.", facebook: "", instagram: "https://ig.com/sophia", tiktok: "https://tiktok.com/@sophia",
                        createdBy: "admin", createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), firstName: "Noah", lastName: "Chen", email: "noah.c@example.com", phone: "+1567890123",
                        leadSource: "Open House", leadType: "Buyer", status: "Showing Scheduled", tags: ["Family Home", "Suburbs"],
                        notes: "Scheduled to see 3 properties this Saturday.", createdBy: "user", createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), firstName: "Isabella", lastName: "Kim", email: "isabella.k@example.com", phone: "+1678901234",
                        leadSource: "Website", leadType: "Seller", status: "Contacted", tags: ["Investment Property"], 
                        notes: "Wants to sell a rental property.", createdBy: "admin", createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), firstName: "Ethan", lastName: "Jones", email: "ethan.j@example.net", phone: "555-1234",
                        leadSource: "Facebook Ad", leadType: "Buyer", status: "New Lead", tags: ["Starter Home", "Budget Conscious"],
                        notes: "Looking for a 3-bedroom under $300k.", createdBy: "admin", createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), firstName: "Ava", lastName: "Williams", email: "ava.w@example.org", phone: "555-5678",
                        leadSource: "Google Search", leadType: "Seller", status: "Qualified", tags: ["Downsizing", "Retirement"],
                        notes: "Wants to sell large family home and move to a smaller condo.", createdBy: "user", createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), firstName: "Michael", lastName: "Brown", email: "michael.b@example.com", phone: "555-9012",
                        leadSource: "Walk-in", leadType: "Renter", status: "Contacted", tags: ["Apartment", "Pet-Friendly"],
                        notes: "Needs a 2-bedroom apartment that allows dogs.", createdBy: "admin", createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), firstName: "Chloe", lastName: "Davis", email: "chloe.d@example.net", phone: "555-3456",
                        leadSource: "Referral", leadType: "Buyer", status: "Showing Scheduled", tags: ["New Construction", "Modern"],
                        notes: "Interested in newly built homes with modern amenities.", createdBy: "user", createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), firstName: "James", lastName: "Wilson", email: "james.w@example.org", phone: "555-7890",
                        leadSource: "LinkedIn", leadType: "Investor", status: "Offer Made", tags: ["Multi-family", "Cash Flow"],
                        notes: "Looking for investment properties with good rental income.", createdBy: "admin", createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), firstName: "Harper", lastName: "Martinez", email: "harper.m@example.com", phone: "555-2345",
                        leadSource: "Website Form", leadType: "Buyer", status: "Under Contract", tags: ["Luxury", "Waterfront"],
                        notes: "Under contract for a lakefront property.", createdBy: "user", createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), firstName: "Logan", lastName: "Anderson", email: "logan.a@example.net", phone: "555-6789",
                        leadSource: "Email Campaign", leadType: "Seller", status: "Closed", tags: ["Relocated", "Sold"],
                        notes: "Successfully sold their home and moved out of state.", createdBy: "admin", createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), firstName: "Mia", lastName: "Thomas", email: "mia.t@example.org", phone: "555-0123",
                        leadSource: "Sign Call", leadType: "Buyer", status: "Lost / Inactive", tags: ["Indecisive", "Paused Search"],
                        notes: "Decided to pause their home search for now.", createdBy: "user", createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), firstName: "Lucas", lastName: "Jackson", email: "lucas.j@example.com", phone: "555-4567",
                        leadSource: "Open House", leadType: "Buyer", status: "Qualified", tags: ["Young Professional", "Urban Living"],
                        notes: "Looking for a condo or townhouse near downtown.", createdBy: "admin", createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), firstName: "Ella", lastName: "White", email: "ella.w@example.net", phone: "555-8901",
                        leadSource: "Social Media", leadType: "Renter", status: "New Lead", tags: ["Student Housing", "Affordable"],
                        notes: "Student looking for an affordable rental near campus.", createdBy: "user", createdAt: getLocalTimestamp().toDate().toISOString()
                    }
                ];
                 tasks = [
                    {
                        id: generateId(), title: "Initial Call with Olivia", description: "Discuss her criteria for a luxury condo.",
                        assignedTo: "admin", status: "New", dueDate: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], 
                        relatedLeadId: leads[0]?.id || null, createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), title: "Prepare CMA for Liam", description: "Research comps for 456 Zilker Park Rd.",
                        assignedTo: "user", status: "In Progress", dueDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], 
                        relatedLeadId: leads[1]?.id || null, createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), title: "Follow up with Sophia", description: "Check on her townhome search in Mueller.",
                        assignedTo: "admin", status: "Pending", dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], 
                        relatedLeadId: leads[2]?.id || null, createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), title: "Schedule showing for Noah", description: "Confirm times for Saturday.",
                        assignedTo: "user", status: "New", dueDate: new Date(Date.now() + 0 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], 
                        relatedLeadId: leads[3]?.id || null, createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), title: "Send market report to Isabella", description: "Include recent sales of investment properties.",
                        assignedTo: "admin", status: "Pending", dueDate: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                        relatedLeadId: leads[4]?.id || null, createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), title: "Draft offer for Ethan", description: "Based on the property he liked.",
                        assignedTo: "admin", status: "In Progress", dueDate: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                        relatedLeadId: leads[5]?.id || null, createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), title: "Final walkthrough with Harper", description: "Before closing on lakefront property.",
                        assignedTo: "user", status: "Completed", dueDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], 
                        relatedLeadId: leads[10]?.id || null, createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), title: "Check in with Mia", description: "See if she's ready to resume search.",
                        assignedTo: "admin", status: "Deferred", dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], 
                        relatedLeadId: leads[12]?.id || null, createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), title: "Send rental application to Ella", description: "For the campus apartment.",
                        assignedTo: "user", status: "New", dueDate: new Date(Date.now() + 0 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                        relatedLeadId: leads[14]?.id || null, createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                     {
                        id: generateId(), title: "Research multi-family units for James", description: "Focus on cash flow potential.",
                        assignedTo: "admin", status: "Pending", dueDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                        relatedLeadId: leads[9]?.id || null, createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), title: "Coordinate staging for Ava's home", description: "Get quotes from stagers.",
                        assignedTo: "user", status: "In Progress", dueDate: new Date(Date.now() + 6 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                        relatedLeadId: leads[6]?.id || null, createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                     {
                        id: generateId(), title: "Update Michael on new pet-friendly listings", description: "Send 2-bedroom options.",
                        assignedTo: "admin", status: "New", dueDate: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                        relatedLeadId: leads[7]?.id || null, createdAt: getLocalTimestamp().toDate().toISOString()
                    },
                    {
                        id: generateId(), title: "Prepare closing documents for Logan", description: "Ensure all paperwork is ready.",
                        assignedTo: "user", status: "Completed", dueDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], 
                        relatedLeadId: leads[11]?.id || null, createdAt: getLocalTimestamp().toDate().toISOString()
                    }
                ];
                // Initialize duplicated data arrays (can be empty or seeded if needed)
                dripEmailTemplates = []; // Or copy from emailTemplates if desired for initial state
                dripDripCampaigns = []; // Or copy from dripCampaigns

                saveAllDataToLocalStorage();
                localStorage.setItem(dataVersionKey, 'true'); 
                showMessage("Mock data (v4.2) seeded successfully!", "success");
            }
        };
        const saveAllDataToLocalStorage = () => {
            localStorage.setItem('crm_leads_v4_2', JSON.stringify(leads)); 
            localStorage.setItem('crm_tasks_v4_2', JSON.stringify(tasks)); 
            localStorage.setItem('crm_emailTemplates_v4_2', JSON.stringify(emailTemplates)); 
            localStorage.setItem('crm_dripCampaigns_v4_2', JSON.stringify(dripCampaigns)); 
            // Save duplicated data
            localStorage.setItem('crm_drip_emailTemplates_v4_2', JSON.stringify(dripEmailTemplates));
            localStorage.setItem('crm_drip_dripCampaigns_v4_2', JSON.stringify(dripDripCampaigns));
            saveUsersToLocalStorage();
        };


        // --- UI Rendering Functions ---
        const renderAllSections = () => {
            if (!currentUser) return; 
            renderLeads(currentLeadsFilter);
            populateLeadDropdowns(); 
            renderDashboard(); 
            renderKanbanBoard();
            renderCalendar(currentCalendarFilter);
            renderTasks(currentTasksFilter);
            renderEmailMarketingSection();
            renderDripSection(); // Render the new Drip section
            renderProfileSection();
            saveAllDataToLocalStorage(); 
        };

        const populateLeadDropdowns = () => { 
            const taskRelatedLeadSelect = document.getElementById('task-related-lead');
            if (taskRelatedLeadSelect) {
                const currentTaskLeadVal = taskRelatedLeadSelect.value; 
                taskRelatedLeadSelect.innerHTML = '<option value="">Select Related Lead*</option>'; 
                leads.forEach(lead => {
                    const option = document.createElement('option');
                    option.value = lead.id;
                    option.textContent = `${lead.firstName} ${lead.lastName}`;
                    taskRelatedLeadSelect.appendChild(option);
                });
                taskRelatedLeadSelect.value = currentTaskLeadVal; 
            }

            const leadStatusSelect = document.getElementById('lead-status');
             if (leadStatusSelect) {
                const currentLeadStatusVal = leadStatusSelect.value; 
                leadStatusSelect.innerHTML = ''; 
                activeKanbanStatuses.forEach(status => { 
                    const option = document.createElement('option');
                    option.value = status;
                    option.textContent = status;
                    leadStatusSelect.appendChild(option);
                });
                if (activeKanbanStatuses.includes(currentLeadStatusVal)) {
                    leadStatusSelect.value = currentLeadStatusVal;
                } else if (activeKanbanStatuses.length > 0) {
                    leadStatusSelect.value = activeKanbanStatuses[0];
                }
            }
        };
        
        const getLeadStatusColor = (statusName) => {
            const classNameFragment = statusName.toLowerCase().replace(/\s+/g, '-').replace(/\//g, '');
            const fullClassName = `kanban-lead-${classNameFragment}`;
            const tempDiv = document.createElement('div');
            tempDiv.style.display = 'none'; 
            tempDiv.className = fullClassName; 
            document.body.appendChild(tempDiv);
            let color = getComputedStyle(tempDiv).backgroundColor; 
            if (!color || color === 'rgba(0, 0, 0, 0)' || color === 'transparent') {
                let hash = 0;
                for (let i = 0; i < statusName.length; i++) {
                    hash = statusName.charCodeAt(i) + ((hash << 5) - hash);
                }
                const c = (hash & 0x00FFFFFF).toString(16).toUpperCase();
                color = "#" + "00000".substring(0, 6 - c.length) + c; 
            }
            document.body.removeChild(tempDiv); 
            return color;
        };

        const getTaskStatusColor = (statusName) => {
            const classNameFragment = `task-status-${statusName.toLowerCase().replace(/\s+/g, '-').replace(/\//g, '')}`;
            const tempDiv = document.createElement('div');
            tempDiv.style.display = 'none';
            tempDiv.className = classNameFragment;
            document.body.appendChild(tempDiv);
            let color = getComputedStyle(tempDiv).backgroundColor;
            if (!color || color === 'rgba(0, 0, 0, 0)' || color === 'transparent') {
                let hash = 0;
                for (let i = 0; i < statusName.length; i++) {
                    hash = statusName.charCodeAt(i) + ((hash << 5) - hash);
                }
                const c = (hash & 0x00FFFFFF).toString(16).toUpperCase();
                color = "#" + "00000".substring(0, 6 - c.length) + c;
            }
            document.body.removeChild(tempDiv);
            return color;
        };


        const renderDashboard = () => {
            // --- Render Lead Status Ring Chart & Custom Legend ---
            const leadChartCtx = document.getElementById('leadStatusRingChart')?.getContext('2d');
            const leadCustomLegendDiv = document.getElementById('leadStatusCustomLegend');

            if (leadChartCtx && leadCustomLegendDiv) {
                const leadStatusCounts = leads.reduce((acc, lead) => {
                    acc[lead.status] = (acc[lead.status] || 0) + 1;
                    return acc;
                }, {});

                const leadChartLabels = [];
                const leadChartData = [];
                const leadChartBackgroundColors = [];

                activeKanbanStatuses.forEach(status => {
                    leadChartLabels.push(status);
                    leadChartData.push(leadStatusCounts[status] || 0);
                    leadChartBackgroundColors.push(getLeadStatusColor(status));
                });

                if (leadStatusRingChartInstance) {
                    leadStatusRingChartInstance.destroy();
                }

                leadStatusRingChartInstance = new Chart(leadChartCtx, {
                    type: 'doughnut',
                    data: {
                        labels: leadChartLabels,
                        datasets: [{
                            label: 'Lead Statuses',
                            data: leadChartData,
                            backgroundColor: leadChartBackgroundColors,
                            borderColor: document.documentElement.classList.contains('dark') ? 'var(--color-neutral-medium)' : 'var(--color-neutral-light)',
                            borderWidth: 1, 
                            hoverOffset: 8
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        cutout: '60%', 
                        animation: {
                            animateScale: true,
                            animateRotate: true
                        },
                        onClick: (event, elements) => {
                            if (elements.length > 0) {
                                const clickedIndex = elements[0].index;
                                const status = leadStatusRingChartInstance.data.labels[clickedIndex];
                                currentLeadsFilter = status;
                                document.getElementById('leads-tab')?.click();
                            }
                        },
                        plugins: {
                            legend: {
                                display: false 
                            },
                            tooltip: { 
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                                        const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                                        return `${label}: ${value} (${percentage}%)`;
                                    }
                                }
                            },
                            datalabels: { 
                                display: function(context) {
                                    return context.dataset.data[context.dataIndex] > 0; 
                                },
                                color: (context) => { 
                                    const bgColor = context.dataset.backgroundColor[context.dataIndex];
                                    const rgb = bgColor.match(/\d+/g);
                                    if (rgb && (rgb[0]*0.299 + rgb[1]*0.587 + rgb[2]*0.114) > 186) {
                                        return '#000000'; 
                                    }
                                    return '#FFFFFF'; 
                                },
                                font: {
                                    weight: 'bold',
                                    size: 12
                                },
                                formatter: (value) => {
                                    return value; 
                                }
                            }
                        }
                    }
                });

                leadCustomLegendDiv.innerHTML = ''; 
                activeKanbanStatuses.forEach(status => {
                    const count = leadStatusCounts[status] || 0;
                    const legendItem = document.createElement('div');
                    const color = getLeadStatusColor(status);
                    
                    legendItem.className = `legend-item flex items-center p-2 rounded-md shadow-sm`;
                    legendItem.style.backgroundColor = color; 
                    
                    const rgb = color.match(/\d+/g);
                    let itemTextColor = 'var(--color-neutral-dark)'; 
                    if (rgb && (rgb[0]*0.299 + rgb[1]*0.587 + rgb[2]*0.114) < 128) { 
                       itemTextColor = 'var(--color-neutral-light)'; 
                    }
                    const leadTextColorVar = `--color-lead-${status.toLowerCase().replace(/\s+/g, '-').replace(/\//g, '')}-text`;
                    const specificLeadTextColor = getComputedStyle(document.documentElement).getPropertyValue(leadTextColorVar).trim();
                    if (specificLeadTextColor && specificLeadTextColor !== "initial" && specificLeadTextColor !== "inherit") { 
                        itemTextColor = specificLeadTextColor;
                    }


                    legendItem.innerHTML = `
                        <span class="text-xs font-medium" style="color: ${itemTextColor};">${status}: ${count}</span>
                    `;
                    legendItem.addEventListener('click', () => {
                        currentLeadsFilter = status;
                        document.getElementById('leads-tab')?.click(); 
                    });
                    leadCustomLegendDiv.appendChild(legendItem);
                });

            } else {
                console.warn("Lead status ring chart canvas or custom legend div not found");
            }

            // --- Render Task Status Ring Chart & Custom Legend ---
            const taskChartCtx = document.getElementById('taskStatusRingChart')?.getContext('2d');
            const taskCustomLegendDiv = document.getElementById('taskStatusCustomLegend');

            if (taskChartCtx && taskCustomLegendDiv) {
                const taskStatusCounts = tasks.reduce((acc, task) => {
                    acc[task.status] = (acc[task.status] || 0) + 1;
                    return acc;
                }, {});

                const taskChartLabels = [];
                const taskChartData = [];
                const taskChartBackgroundColors = [];

                allTaskStatusesForChart.forEach(status => {
                    taskChartLabels.push(status);
                    taskChartData.push(taskStatusCounts[status] || 0);
                    taskChartBackgroundColors.push(getTaskStatusColor(status));
                });

                if (taskStatusRingChartInstance) {
                    taskStatusRingChartInstance.destroy();
                }
                taskStatusRingChartInstance = new Chart(taskChartCtx, {
                    type: 'doughnut',
                    data: {
                        labels: taskChartLabels,
                        datasets: [{
                            label: 'Task Statuses',
                            data: taskChartData,
                            backgroundColor: taskChartBackgroundColors,
                            borderColor: document.documentElement.classList.contains('dark') ? 'var(--color-neutral-medium)' : 'var(--color-neutral-light)',
                            borderWidth: 1,
                            hoverOffset: 8
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        cutout: '60%',
                        animation: { animateScale: true, animateRotate: true },
                        onClick: (event, elements) => {
                            if (elements.length > 0) {
                                const clickedIndex = elements[0].index;
                                const status = taskStatusRingChartInstance.data.labels[clickedIndex];
                                currentTasksFilter = status; 
                                dashboardUpcomingTasksFilter = status; 
                                document.getElementById('tasks-tab')?.click();
                                renderUpcomingTasksOnDashboard(dashboardUpcomingTasksFilter); 
                            }
                        },
                        plugins: {
                            legend: { display: false },
                            tooltip: { /* ... (tooltip config as in lead chart) ... */ },
                            datalabels: { 
                                display: function(context) {
                                    return context.dataset.data[context.dataIndex] > 0; 
                                },
                                color: (context) => { 
                                    const bgColor = context.dataset.backgroundColor[context.dataIndex];
                                    const rgb = bgColor.match(/\d+/g);
                                    if (rgb && (rgb[0]*0.299 + rgb[1]*0.587 + rgb[2]*0.114) > 186) {
                                        return '#000000';
                                    }
                                    return '#FFFFFF';
                                },
                                font: { weight: 'bold', size: 12 },
                                formatter: (value) => value
                            }
                        }
                    }
                });
                
                taskCustomLegendDiv.innerHTML = ''; 
                allTaskStatusesForChart.forEach(status => {
                    const count = taskStatusCounts[status] || 0;
                    const legendItem = document.createElement('div');
                    const color = getTaskStatusColor(status);
                    
                    legendItem.className = `legend-item flex items-center p-2 rounded-md shadow-sm`;
                    legendItem.style.backgroundColor = color;

                    let itemTextColor = 'var(--color-neutral-dark)'; 
                    const rgb = color.match(/\d+/g);
                    if (rgb && (rgb[0]*0.299 + rgb[1]*0.587 + rgb[2]*0.114) < 128) { 
                       itemTextColor = 'var(--color-neutral-light)'; 
                    }
                    const taskTextColorVar = `--color-task-${status.toLowerCase().replace(/\s+/g, '-')}-text`;
                    const specificTextColor = getComputedStyle(document.documentElement).getPropertyValue(taskTextColorVar).trim();
                    if (specificTextColor && specificTextColor !== "initial" && specificTextColor !== "inherit") {
                        itemTextColor = specificTextColor;
                    }

                    legendItem.innerHTML = `
                        <span class="text-xs font-medium" style="color: ${itemTextColor};">${status}: ${count}</span>
                    `;
                    legendItem.addEventListener('click', () => {
                        currentTasksFilter = status; 
                        dashboardUpcomingTasksFilter = status; 
                        document.getElementById('tasks-tab')?.click();
                        renderUpcomingTasksOnDashboard(dashboardUpcomingTasksFilter); 
                    });
                    taskCustomLegendDiv.appendChild(legendItem);
                });


            } else {
                 console.warn("taskStatusRingChart canvas or custom legend div not found");
            }

            renderUpcomingTasksOnDashboard(dashboardUpcomingTasksFilter); 
            renderDashboardTaskFilterButtons(); 
        };

        const renderDashboardTaskFilterButtons = () => {
            const filterButtonsDiv = document.getElementById('dashboard-upcoming-tasks-filter-buttons');
            if (!filterButtonsDiv) return;
            filterButtonsDiv.innerHTML = '';
            const statusesToFilter = ["All", ...allTaskStatusesForChart];

            statusesToFilter.forEach(status => {
                const button = document.createElement('button');
                button.className = `px-3 py-1 rounded-lg font-medium text-xs transition-colors duration-200 ${status === dashboardUpcomingTasksFilter ? 'active bg-primary-pastel text-primary-on-pastel hover:bg-primary-pastel-darker' : 'bg-neutral-medium text-neutral-dark hover:bg-neutral-border'}`;
                button.dataset.filter = status;
                button.textContent = status;
                button.addEventListener('click', () => {
                    dashboardUpcomingTasksFilter = status;
                    renderUpcomingTasksOnDashboard(dashboardUpcomingTasksFilter);
                    filterButtonsDiv.querySelectorAll('button').forEach(btn => {
                        btn.classList.toggle('active', btn.dataset.filter === dashboardUpcomingTasksFilter);
                        btn.classList.toggle('bg-primary-pastel', btn.dataset.filter === dashboardUpcomingTasksFilter);
                        btn.classList.toggle('text-primary-on-pastel', btn.dataset.filter === dashboardUpcomingTasksFilter);
                        btn.classList.toggle('bg-neutral-medium', btn.dataset.filter !== dashboardUpcomingTasksFilter);
                        btn.classList.toggle('text-neutral-dark', btn.dataset.filter !== dashboardUpcomingTasksFilter);
                    });
                });
                filterButtonsDiv.appendChild(button);
            });
        };
        
        const renderUpcomingTasksOnDashboard = (filterStatus = 'All') => {
            const next7TasksListDiv = document.getElementById('next-7-tasks-list');
            if(!next7TasksListDiv) return;
            next7TasksListDiv.innerHTML = ''; 
            const noUpcomingTasksMessage = document.getElementById('no-upcoming-tasks');
            const today = new Date(); today.setHours(0, 0, 0, 0); 
            const sevenDaysFromNow = new Date(); sevenDaysFromNow.setDate(today.getDate() + 7); sevenDaysFromNow.setHours(23, 59, 59, 999); 

            let filteredUpcomingTasks = tasks.filter(task => {
                if (!task.dueDate) return false;
                const dueDate = new Date(task.dueDate + "T00:00:00"); 
                return dueDate >= today && dueDate <= sevenDaysFromNow && task.status !== 'Completed';
            });

            if (filterStatus !== 'All') {
                filteredUpcomingTasks = filteredUpcomingTasks.filter(task => task.status === filterStatus);
            }
            
            filteredUpcomingTasks.sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));

            if(noUpcomingTasksMessage) noUpcomingTasksMessage.style.display = filteredUpcomingTasks.length === 0 ? 'block' : 'none';
            
            if (filteredUpcomingTasks.length > 0 && next7TasksListDiv) {
                filteredUpcomingTasks.forEach(task => {
                    const taskItem = document.createElement('div');
                    taskItem.className = `p-3 rounded-md shadow-sm border task-status-${task.status.toLowerCase().replace(/\s+/g, '-').replace(/\//g, '')}`;
                    const dueDate = task.dueDate ? new Date(task.dueDate + "T00:00:00").toLocaleDateString() : 'N/A';
                    const relatedLead = leads.find(lead => lead.id === task.relatedLeadId);
                    taskItem.innerHTML = `
                        <h4 class="font-medium">${task.title}</h4>
                        <p class="text-xs">Due: ${dueDate} - Status: ${task.status}</p>
                        ${relatedLead ? `<p class="text-xs">Lead: ${relatedLead.firstName} ${relatedLead.lastName}</p>` : ''}
                    `;
                    next7TasksListDiv.appendChild(taskItem);
                });
            }
        };
        
        const renderLeads = (filterStatus = 'All') => { 
            const leadsListDiv = document.getElementById('leads-list');
            if (!leadsListDiv) { console.warn("Leads list div not found"); return; }
            leadsListDiv.innerHTML = ''; 
            const noLeadsMessage = document.getElementById('no-leads-message');
            const leadsFilterStatusDiv = document.getElementById('leads-filter-status');
            const currentLeadFilterSpan = document.getElementById('current-lead-filter');
            const clearLeadsFilterButton = document.getElementById('clear-leads-filter-button');
            const leadsFilterButtonsDiv = document.getElementById('leads-filter-buttons');

            const uniqueLeadStatuses = ["All", ...new Set(leads.map(lead => lead.status))].sort();

            if(leadsFilterButtonsDiv) {
                leadsFilterButtonsDiv.innerHTML = ''; 
                uniqueLeadStatuses.forEach(status => {
                    const button = document.createElement('button');
                    button.className = `px-4 py-2 rounded-lg font-medium text-sm transition-colors duration-200 ${status === filterStatus ? 'active bg-primary-pastel text-primary-on-pastel hover:bg-primary-pastel-darker' : 'bg-neutral-medium text-neutral-dark hover:bg-neutral-border'}`;
                    button.dataset.filter = status;
                    button.textContent = status;
                    button.addEventListener('click', () => {
                        currentLeadsFilter = status;
                        renderLeads(currentLeadsFilter); 
                    });
                    leadsFilterButtonsDiv.appendChild(button);
                });
            }

            const filteredLeads = filterStatus === 'All' ? leads : leads.filter(lead => lead.status === filterStatus);

            if (leadsFilterStatusDiv && currentLeadFilterSpan && clearLeadsFilterButton) {
                if (filterStatus !== 'All') {
                    leadsFilterStatusDiv.classList.remove('hidden');
                    currentLeadFilterSpan.textContent = filterStatus;
                    clearLeadsFilterButton.onclick = () => {
                        currentLeadsFilter = 'All';
                        renderLeads('All'); 
                    };
                } else {
                    leadsFilterStatusDiv.classList.add('hidden');
                }
            }
            
            if(noLeadsMessage) noLeadsMessage.style.display = filteredLeads.length === 0 ? 'block' : 'none';

            filteredLeads.forEach(lead => {
                const leadCard = document.createElement('div');
                leadCard.className = 'bg-neutral-light p-4 rounded-lg shadow-sm border border-neutral-border text-neutral-dark';
                leadCard.innerHTML = `
                    <h4 class="font-semibold text-primary-pastel">${lead.firstName} ${lead.lastName}</h4>
                    <p class="text-sm text-secondary-text">Email: ${lead.email || 'N/A'}</p>
                    <p class="text-sm text-secondary-text">Phone: ${lead.phone || 'N/A'}</p>
                    <p class="text-sm text-secondary-text">Status: <span class="font-medium text-primary-pastel">${lead.status || 'N/A'}</span></p>
                    <p class="text-sm text-secondary-text truncate" title="${lead.notes || 'N/A'}">Notes: ${lead.notes ? (lead.notes.substring(0,50) + (lead.notes.length > 50 ? '...' : '')) : 'N/A'}</p>
                    <p class="text-xs text-secondary-text mt-2">Created: ${lead.createdAt ? new Date(lead.createdAt).toLocaleDateString() : 'N/A'}</p>
                    <div class="mt-4 flex gap-2">
                        <button data-id="${lead.id}" class="edit-lead-button bg-primary-pastel text-primary-on-pastel px-3 py-1 rounded-md text-sm hover:bg-primary-pastel-darker transition-colors">Edit</button>
                        <button data-id="${lead.id}" class="delete-lead-button bg-destructive-pastel text-destructive-on-pastel px-3 py-1 rounded-md text-sm hover:bg-destructive-pastel-darker transition-colors">Delete</button>
                    </div>
                `;
                leadsListDiv.appendChild(leadCard);
            });

            leadsListDiv.querySelectorAll('.edit-lead-button').forEach(button => {
                button.addEventListener('click', (e) => editLead(e.target.dataset.id));
            });
            leadsListDiv.querySelectorAll('.delete-lead-button').forEach(button => {
                button.addEventListener('click', (e) => deleteLead(e.target.dataset.id));
            });
        };
        const renderTasks = (filterStatus = 'All') => { 
            const tasksListDiv = document.getElementById('tasks-list');
            if (!tasksListDiv) { console.warn("Tasks list div not found"); return; }
            tasksListDiv.innerHTML = ''; 
            const noTasksMessage = document.getElementById('no-tasks-message');
            const tasksFilterStatusDiv = document.getElementById('tasks-filter-status');
            const currentTaskFilterSpan = document.getElementById('current-task-filter');
            const clearTasksFilterButton = document.getElementById('clear-tasks-filter-button');
            const tasksFilterButtonsDiv = document.getElementById('tasks-filter-buttons');

            const uniqueTaskStatuses = ["All", ...new Set(tasks.map(task => task.status))].sort();

            if(tasksFilterButtonsDiv) {
                tasksFilterButtonsDiv.innerHTML = ''; 
                uniqueTaskStatuses.forEach(status => {
                    const button = document.createElement('button');
                    button.className = `px-4 py-2 rounded-lg font-medium text-sm transition-colors duration-200 ${status === filterStatus ? 'active bg-primary-pastel text-primary-on-pastel hover:bg-primary-pastel-darker' : 'bg-neutral-medium text-neutral-dark hover:bg-neutral-border'}`;
                    button.dataset.filter = status;
                    button.textContent = status;
                    button.addEventListener('click', () => {
                        currentTasksFilter = status;
                        renderTasks(currentTasksFilter); 
                    });
                    tasksFilterButtonsDiv.appendChild(button);
                });
            }

            const filteredTasks = filterStatus === 'All' ? tasks : tasks.filter(task => task.status === filterStatus);

            if (tasksFilterStatusDiv && currentTaskFilterSpan && clearTasksFilterButton) {
                if (filterStatus !== 'All') {
                    tasksFilterStatusDiv.classList.remove('hidden');
                    currentTaskFilterSpan.textContent = filterStatus;
                    clearTasksFilterButton.onclick = () => {
                        currentTasksFilter = 'All';
                        renderTasks('All'); 
                    };
                } else {
                    tasksFilterStatusDiv.classList.add('hidden');
                }
            }
            
            if(noTasksMessage) noTasksMessage.style.display = filteredTasks.length === 0 ? 'block' : 'none';

            filteredTasks.forEach(task => {
                const taskCard = document.createElement('div');
                taskCard.className = `p-4 rounded-lg shadow-sm border task-status-${task.status.toLowerCase().replace(/\s+/g, '-').replace(/\//g, '')}`;
                const relatedLead = leads.find(lead => lead.id === task.relatedLeadId);
                const dueDate = task.dueDate ? new Date(task.dueDate + "T00:00:00").toLocaleDateString() : 'N/A';
                taskCard.innerHTML = `
                    <h4 class="font-semibold">${task.title}</h4>
                    <p class="text-sm">Description: ${task.description || 'N/A'}</p>
                    <p class="text-sm">Status: <span class="font-medium">${task.status || 'N/A'}</span></p>
                    <p class="text-sm">Due Date: ${dueDate}</p>
                    <p class="text-sm">Related Lead: ${relatedLead ? `${relatedLead.firstName} ${relatedLead.lastName}` : 'N/A'}</p>
                    <p class="text-xs mt-2">Created: ${task.createdAt ? new Date(task.createdAt).toLocaleDateString() : 'N/A'}</p>
                    <div class="mt-4 flex gap-2">
                        <button data-id="${task.id}" class="edit-task-button bg-primary-pastel text-primary-on-pastel px-3 py-1 rounded-md text-sm hover:bg-primary-pastel-darker transition-colors">Edit</button>
                        <button data-id="${task.id}" class="delete-task-button bg-destructive-pastel text-destructive-on-pastel px-3 py-1 rounded-md text-sm hover:bg-destructive-pastel-darker transition-colors">Delete</button>
                    </div>
                `;
                tasksListDiv.appendChild(taskCard);
            });

            tasksListDiv.querySelectorAll('.edit-task-button').forEach(button => {
                button.addEventListener('click', (e) => editTask(e.target.dataset.id));
            });
            tasksListDiv.querySelectorAll('.delete-task-button').forEach(button => {
                button.addEventListener('click', (e) => deleteTask(e.target.dataset.id));
            });
        };
        
        const renderKanbanBoard = () => {
            const kanbanBoardDiv = document.getElementById('kanban-board');
            if (!kanbanBoardDiv) {
                console.warn("Kanban board element not found.");
                return;
            }
            kanbanBoardDiv.innerHTML = ''; 
            kanbanSortableInstances.forEach(instance => instance.destroy());
            kanbanSortableInstances = []; 

            activeKanbanStatuses.forEach(status => {
                const column = document.createElement('div');
                column.className = 'kanban-column'; 
                const columnId = `kanban-lead-list-${status.toLowerCase().replace(/\s+/g, '-').replace(/\//g, '')}`; 
                
                column.innerHTML = `
                    <div class="kanban-column-header">
                        <h3 class="kanban-column-title">${status}</h3>
                        <svg class="kanban-column-toggle-icon w-5 h-5 text-neutral-dark transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>
                    </div>
                    <div id="${columnId}" class="kanban-list"> 
                        </div>
                `;
                kanbanBoardDiv.appendChild(column);

                const header = column.querySelector('.kanban-column-header');
                if (header) {
                    header.addEventListener('click', () => {
                        column.classList.toggle('collapsed');
                    });
                }

                const leadListForStatus = document.getElementById(columnId);
                if (!leadListForStatus) {
                    console.warn(`Kanban list element for status "${status}" not found.`);
                    return; 
                }
                const leadsInStatus = leads.filter(lead => lead.status === status);

                if (leadsInStatus.length === 0) {
                    leadListForStatus.classList.add('kanban-list-empty'); 
                    leadListForStatus.innerHTML = '<p class="text-secondary-text text-sm p-2 text-center">No leads here.</p>';
                } else {
                    leadListForStatus.classList.remove('kanban-list-empty');
                    leadsInStatus.forEach(lead => {
                        const leadItem = document.createElement('div');
                        const leadStatusClass = `kanban-lead-${lead.status.toLowerCase().replace(/\s+/g, '-').replace(/\//g, '')}`;
                        leadItem.className = `kanban-item p-3 rounded-md shadow-sm cursor-grab active:cursor-grabbing ${leadStatusClass}`;
                        leadItem.setAttribute('data-id', lead.id); 
                        
                        leadItem.innerHTML = `
                            <div class="flex justify-between items-start">
                                <h4 class="text-sm font-semibold">${lead.firstName} ${lead.lastName}</h4>
                                <button data-lead-id="${lead.id}" class="move-lead-button text-xs bg-primary-pastel text-primary-on-pastel hover:bg-primary-pastel-darker px-2 py-1 rounded">Move</button>
                            </div>
                            <p class="text-xs mt-1">Status: ${lead.status}</p>
                            <p class="text-xs mt-1">Type: ${lead.leadType || 'N/A'}</p>
                            <p class="text-xs mt-1">Source: ${lead.leadSource || 'N/A'}</p>
                            <p class="text-xs mt-1 truncate" title="${lead.notes || 'No notes'}">Notes: ${lead.notes ? lead.notes.substring(0,30) + '...' : 'No notes'}</p>
                        `;
                        leadListForStatus.appendChild(leadItem);
                    });
                }
                
                leadListForStatus.querySelectorAll('.move-lead-button').forEach(button => {
                    button.addEventListener('click', (e) => {
                        e.stopPropagation(); 
                        openLeadStatusChangeModal(e.target.dataset.leadId);
                    });
                });
                
                const sortableInstance = new Sortable(leadListForStatus, {
                    group: 'kanban-leads', 
                    animation: 150, 
                    ghostClass: 'sortable-ghost', 
                    dragClass: 'opacity-50', 
                    onEnd: (evt) => { 
                        const leadId = evt.item.dataset.id;
                        const newStatusColumnId = evt.to.id; 
                        const newStatus = activeKanbanStatuses.find(s => `kanban-lead-list-${s.toLowerCase().replace(/\s+/g, '-').replace(/\//g, '')}` === newStatusColumnId);

                        if (newStatus) {
                            const leadIndex = leads.findIndex(l => l.id === leadId);
                            if (leadIndex > -1 && leads[leadIndex].status !== newStatus) {
                                leads[leadIndex].status = newStatus; 
                                showMessage(`Lead "${leads[leadIndex].firstName}" status updated to "${newStatus}".`, "success");
                                renderAllSections(); 
                            }
                        } else {
                            console.error("Could not determine new status from column ID for lead:", newStatusColumnId);
                        }
                    }
                });
                kanbanSortableInstances.push(sortableInstance); 
            });
        };

        const openLeadStatusChangeModal = (leadId) => { /* ... */ };
        const openTaskDetailModal = (taskId) => { /* ... */ };
        let calendarInstance = null; 
        const renderCalendar = (filterStatus = 'All') => {
            const calendarEl = document.getElementById('calendar');
            if (!calendarEl) {
                console.warn("Calendar element not found.");
                return;
            }
            if (calendarInstance) calendarInstance.destroy(); 

            const filteredTasks = filterStatus === 'All' ? tasks : tasks.filter(task => task.status === filterStatus);
            const events = filteredTasks.map(task => {
                const tempDiv = document.createElement('div');
                tempDiv.style.display = 'none';
                tempDiv.className = `task-status-${task.status.toLowerCase().replace(/\s+/g, '-').replace(/\//g, '')}`;
                document.body.appendChild(tempDiv);
                const computedStyle = getComputedStyle(tempDiv);
                const eventColor = computedStyle.backgroundColor;
                const eventTextColor = computedStyle.color;
                document.body.removeChild(tempDiv);

                return {
                    id: task.id,
                    title: task.title,
                    start: task.dueDate ? (task.dueDate + "T00:00:00") : null, 
                    allDay: true, 
                    backgroundColor: eventColor,
                    borderColor: eventColor, 
                    textColor: eventTextColor
                };
            }).filter(event => event.start !== null); 

            document.querySelectorAll('.calendar-filter-button').forEach(button => {
                const isActive = button.dataset.filter === filterStatus;
                button.classList.toggle('active', isActive);
                button.classList.toggle('bg-primary-pastel', isActive);
                button.classList.toggle('text-primary-on-pastel', isActive);
                button.classList.toggle('bg-neutral-medium', !isActive);
                button.classList.toggle('text-neutral-dark', !isActive);
            });

            calendarInstance = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth', 
                headerToolbar: { left: 'prev,next today', center: 'title', right: 'dayGridMonth,timeGridWeek,timeGridDay' },
                events: events,
                eventClick: (info) => openTaskDetailModal(info.event.id) 
            });
            calendarInstance.render();
        };
        
        // --- CRUD Operations and other handlers ---
        const editLead = (leadId) => { /* ... */ };
        const deleteLead = async (leadId) => { /* ... */ };
        const editTask = (taskId) => { /* ... */ };
        const deleteTask = async (taskId) => { /* ... */ };
        
        // --- Email Marketing Section Logic (Original "Emails" Tab) ---
        const renderEmailMarketingSection = () => {
            renderEmailTemplates();
            renderDripCampaignsList();
            populateCampaignTemplateDropdowns(document.getElementById('campaign-steps-container')); 
            // Pre-made templates are now only for the Drip section
            const emailsPremadeGrid = document.getElementById('emails-premade-templates-grid');
            if (emailsPremadeGrid) emailsPremadeGrid.innerHTML = ''; // Clear it if it exists
        };
        const renderEmailTemplates = () => { /* ... (targets 'templates-list', 'no-templates-message', etc.) ... */ };
        const renderDripCampaignsList = () => { /* ... (targets 'campaigns-list', 'no-campaigns-message', etc.) ... */ };
        const populateCampaignTemplateDropdowns = (container = document) => { /* ... (targets '.campaign-step-template' within the given container) ... */ };
        const editEmailTemplate = (templateId) => { /* ... (targets 'editing-template-id', 'template-name', etc.) ... */ };
        const deleteEmailTemplate = async (templateId) => { /* ... */ };
        const editDripCampaign = (campaignId) => { /* ... (targets 'editing-campaign-id', 'campaign-name', etc.) ... */ };
        const deleteDripCampaign = async (campaignId) => { /* ... */ };
        
        // --- Drip Section Logic (New "Drip" Tab) ---
        const renderDripSection = () => {
            renderDripEmailTemplates();
            renderDripDripCampaignsList();
            populateDripCampaignTemplateDropdowns(document.getElementById('drip-campaign-steps-container'));
            attachPremadeTemplateButtonListeners(document.getElementById('drip-premade-templates-grid'), 'drip'); 
        };

        const renderDripEmailTemplates = () => {
            const templatesListDiv = document.getElementById('drip-templates-list');
            if (!templatesListDiv) return;
            templatesListDiv.innerHTML = '';
            const noTemplatesMessage = document.getElementById('drip-no-templates-message');
            if (noTemplatesMessage) noTemplatesMessage.style.display = dripEmailTemplates.length === 0 ? 'block' : 'none';

            dripEmailTemplates.forEach(template => {
                const templateCard = document.createElement('div');
                templateCard.className = 'bg-neutral-medium p-4 rounded-lg shadow-sm border border-neutral-border text-neutral-dark';
                templateCard.innerHTML = `
                    <h4 class="font-semibold text-primary-pastel">${template.name}</h4>
                    <p class="text-sm text-secondary-text">Subject: ${template.subject}</p>
                    <p class="text-xs text-secondary-text mt-2 truncate" title="${template.body}">Body Preview: ${template.body.substring(0, 100)}...</p>
                    <div class="mt-4 flex gap-2">
                        <button data-id="${template.id}" class="drip-edit-template-button bg-primary-pastel text-primary-on-pastel px-3 py-1 rounded-md text-sm hover:bg-primary-pastel-darker">Edit</button>
                        <button data-id="${template.id}" class="drip-delete-template-button bg-destructive-pastel text-destructive-on-pastel px-3 py-1 rounded-md text-sm hover:bg-destructive-pastel-darker">Delete</button>
                    </div>`;
                templatesListDiv.appendChild(templateCard);
            });
            templatesListDiv.querySelectorAll('.drip-edit-template-button').forEach(b => b.addEventListener('click', (e) => editDripEmailTemplate(e.target.dataset.id)));
            templatesListDiv.querySelectorAll('.drip-delete-template-button').forEach(b => b.addEventListener('click', (e) => deleteDripEmailTemplate(e.target.dataset.id)));
        };

        const renderDripDripCampaignsList = () => {
            const campaignsListDiv = document.getElementById('drip-campaigns-list');
            if (!campaignsListDiv) return;
            campaignsListDiv.innerHTML = '';
            const noCampaignsMessage = document.getElementById('drip-no-campaigns-message');
            if (noCampaignsMessage) noCampaignsMessage.style.display = dripDripCampaigns.length === 0 ? 'block' : 'none';

            dripDripCampaigns.forEach(campaign => {
                const campaignCard = document.createElement('div');
                campaignCard.className = 'bg-neutral-medium p-4 rounded-lg shadow-sm border border-neutral-border text-neutral-dark';
                campaignCard.innerHTML = `
                    <h4 class="font-semibold text-primary-pastel">${campaign.name}</h4>
                    <p class="text-sm text-secondary-text">Trigger: ${campaign.trigger}</p>
                    <p class="text-xs text-secondary-text mt-2">Steps: ${campaign.steps.length}</p>
                    <div class="mt-4 flex gap-2">
                        <button data-id="${campaign.id}" class="drip-edit-campaign-button bg-primary-pastel text-primary-on-pastel px-3 py-1 rounded-md text-sm hover:bg-primary-pastel-darker">Edit</button>
                        <button data-id="${campaign.id}" class="drip-delete-campaign-button bg-destructive-pastel text-destructive-on-pastel px-3 py-1 rounded-md text-sm hover:bg-destructive-pastel-darker">Delete</button>
                    </div>`;
                campaignsListDiv.appendChild(campaignCard);
            });
            campaignsListDiv.querySelectorAll('.drip-edit-campaign-button').forEach(b => b.addEventListener('click', (e) => editDripDripCampaign(e.target.dataset.id)));
            campaignsListDiv.querySelectorAll('.drip-delete-campaign-button').forEach(b => b.addEventListener('click', (e) => deleteDripDripCampaign(e.target.dataset.id)));
        };
        
        const populateDripCampaignTemplateDropdowns = (container = document) => {
            container.querySelectorAll('.drip-campaign-step-template').forEach(select => {
                const currentVal = select.value; 
                select.innerHTML = '<option value="">Select Email Template</option>'; 
                dripEmailTemplates.forEach(template => { // Use dripEmailTemplates
                    const option = document.createElement('option');
                    option.value = template.id; option.textContent = template.name;
                    select.appendChild(option);
                });
                select.value = currentVal; 
            });
        };

        const handleSaveDripEmailTemplate = (e) => {
            e.preventDefault();
            const templateData = {
                name: document.getElementById('drip-template-name').value.trim(),
                subject: document.getElementById('drip-template-subject').value.trim(),
                body: document.getElementById('drip-template-body').value.trim(),
            };
            if (!templateData.name || !templateData.subject || !templateData.body) {
                showMessage("Template Name, Subject, and Body are required.", "error"); return;
            }

            if (currentEditingDripTemplateId) { 
                const index = dripEmailTemplates.findIndex(t => t.id === currentEditingDripTemplateId);
                if (index > -1) {
                    dripEmailTemplates[index] = { ...dripEmailTemplates[index], ...templateData };
                    showMessage("Drip email template updated!", "success");
                }
                currentEditingDripTemplateId = null; 
                document.getElementById('drip-template-form-title').textContent = "Create New Email Template (Drip)";
                document.getElementById('drip-create-template-submit-button').textContent = "Save Template";
            } else { 
                const newTemplate = { ...templateData, id: generateId() };
                dripEmailTemplates.push(newTemplate);
                showMessage("Drip email template saved!", "success");
            }
            renderDripSection(); 
            e.target.reset(); 
            document.getElementById('drip-editing-template-id').value = ''; 
        };

        const editDripEmailTemplate = (templateId) => {
            const template = dripEmailTemplates.find(t => t.id === templateId);
            if (template) {
                currentEditingDripTemplateId = templateId;
                document.getElementById('drip-editing-template-id').value = templateId;
                document.getElementById('drip-template-name').value = template.name;
                document.getElementById('drip-template-subject').value = template.subject;
                document.getElementById('drip-template-body').value = template.body;
                document.getElementById('drip-template-form-title').textContent = "Edit Email Template (Drip)";
                document.getElementById('drip-create-template-submit-button').textContent = "Save Changes";
                document.getElementById('drip-template-name').focus();
                showMessage("Drip template loaded for editing.", "info");
            }
        };

        const deleteDripEmailTemplate = async (templateId) => {
            const confirmed = await showConfirmationModal("Delete Drip Template", "Are you sure you want to delete this email template?");
            if (!confirmed) return;
            dripEmailTemplates = dripEmailTemplates.filter(t => t.id !== templateId);
            showMessage("Drip template deleted!", "success");
            renderDripSection();
        };
        
        function createDripCampaignStepHTML() { 
            return `
                <div class="flex items-center gap-2 campaign-step-item">
                    <input type="number" placeholder="Delay (days)" class="drip-campaign-step-delay p-2 border border-neutral-border rounded-md w-24 bg-neutral-light text-neutral-dark placeholder-secondary-text">
                    <select class="drip-campaign-step-template p-2 border border-neutral-border rounded-md flex-grow bg-neutral-light text-neutral-dark">
                        <option value="">Select Email Template</option>
                    </select>
                    <button type="button" class="drip-remove-step-button bg-destructive-pastel text-destructive-on-pastel p-2 rounded-md hover:bg-destructive-pastel-darker transition-colors">
                        <svg class="w-4 h-4 pointer-events-none" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path></svg>
                    </button>
                </div>`;
        }

        const addDripCampaignStep = (container) => { 
            if (!container) return;
            const newStepDiv = document.createElement('div');
            newStepDiv.className = 'flex items-center gap-2 campaign-step-item';
            newStepDiv.innerHTML = createDripCampaignStepHTML(); 
            container.appendChild(newStepDiv);
            populateDripCampaignTemplateDropdowns(newStepDiv); 
            newStepDiv.querySelector('.drip-remove-step-button').addEventListener('click', (e) => {
                e.target.closest('.campaign-step-item').remove();
            });
        };


        const handleSaveDripDripCampaign = (e) => {
            e.preventDefault();
            const campaignData = {
                name: document.getElementById('drip-campaign-name').value.trim(),
                description: document.getElementById('drip-campaign-description').value.trim(),
                trigger: document.getElementById('drip-campaign-trigger').value,
                steps: []
            };

            let validSteps = true;
            document.querySelectorAll('#drip-campaign-steps-container .campaign-step-item').forEach(stepDiv => {
                const delayInput = stepDiv.querySelector('.drip-campaign-step-delay');
                const templateIdInput = stepDiv.querySelector('.drip-campaign-step-template');
                const delay = parseInt(delayInput.value);
                const templateId = templateIdInput.value;
                if (isNaN(delay) || delay < 0 || !templateId) {
                    validSteps = false;
                } else {
                    campaignData.steps.push({ delay, templateId });
                }
            });

            if (!validSteps) {
                showMessage("All campaign steps must have a valid non-negative delay and selected template.", "error"); return;
            }
            if (campaignData.steps.length === 0 && !currentEditingDripCampaignId) {
                 showMessage("A drip campaign must have at least one step.", "error"); return;
            }
            if (!campaignData.name || !campaignData.trigger) {
                showMessage("Campaign Name and Trigger are required.", "error"); return;
            }

            if (currentEditingDripCampaignId) { 
                const index = dripDripCampaigns.findIndex(c => c.id === currentEditingDripCampaignId);
                if (index > -1) {
                    dripDripCampaigns[index] = { ...dripDripCampaigns[index], ...campaignData };
                    showMessage("Drip campaign updated!", "success");
                }
                currentEditingDripCampaignId = null; 
                document.getElementById('drip-campaign-form-title').textContent = "Create New Drip Campaign (Drip)";
                document.getElementById('drip-create-campaign-submit-button').textContent = "Save Campaign";
            } else { 
                const newCampaign = { ...campaignData, id: generateId(), createdAt: getLocalTimestamp().toDate().toISOString() };
                dripDripCampaigns.push(newCampaign);
                showMessage("Drip campaign saved!", "success");
            }
            renderDripSection(); 
            e.target.reset(); 
            document.getElementById('drip-campaign-steps-container').innerHTML = createDripCampaignStepHTML();
            populateDripCampaignTemplateDropdowns(document.getElementById('drip-campaign-steps-container'));
            document.querySelector('#drip-campaign-steps-container .drip-remove-step-button')?.addEventListener('click', (ev) => ev.target.closest('.campaign-step-item').remove());
            document.getElementById('drip-editing-campaign-id').value = ''; 
        };

        const editDripDripCampaign = (campaignId) => {
            const campaign = dripDripCampaigns.find(c => c.id === campaignId);
            if (campaign) {
                currentEditingDripCampaignId = campaignId;
                document.getElementById('drip-editing-campaign-id').value = campaignId;
                document.getElementById('drip-campaign-name').value = campaign.name;
                document.getElementById('drip-campaign-description').value = campaign.description || '';
                document.getElementById('drip-campaign-trigger').value = campaign.trigger;
                
                const stepsContainer = document.getElementById('drip-campaign-steps-container');
                stepsContainer.innerHTML = ''; 
                campaign.steps.forEach(step => {
                    const newStepDiv = document.createElement('div');
                    newStepDiv.className = 'flex items-center gap-2 campaign-step-item';
                    newStepDiv.innerHTML = createDripCampaignStepHTML(); // Use helper
                    newStepDiv.querySelector('.drip-campaign-step-delay').value = step.delay;
                    stepsContainer.appendChild(newStepDiv);
                    const templateSelect = newStepDiv.querySelector('.drip-campaign-step-template');
                    populateDripCampaignTemplateDropdowns(newStepDiv); 
                    templateSelect.value = step.templateId; 
                    newStepDiv.querySelector('.drip-remove-step-button').addEventListener('click', (e) => e.target.closest('.campaign-step-item').remove());
                });

                document.getElementById('drip-campaign-form-title').textContent = "Edit Drip Campaign (Drip)";
                document.getElementById('drip-create-campaign-submit-button').textContent = "Save Changes";
                document.getElementById('drip-campaign-name').focus(); 
                showMessage("Drip campaign loaded for editing.", "info");
            }
        };

        const deleteDripDripCampaign = async (campaignId) => {
            const confirmed = await showConfirmationModal("Delete Drip Campaign", "Are you sure you want to delete this drip campaign?");
            if (!confirmed) return;
            dripDripCampaigns = dripDripCampaigns.filter(c => c.id !== campaignId);
            showMessage("Drip campaign deleted!", "success");
            renderDripSection(); 
        };
        
        const attachPremadeTemplateButtonListeners = (container, sectionPrefix) => {
            if (!container) return;
            // Clear previous listeners by replacing the container's content if it's being repopulated
            // Or, if buttons are static within the container, clone and replace them.
            // For this case, we assume the container's innerHTML is being set by a calling function.
            
            const premadeTemplatesHTML = `
                <h4 class="col-span-full font-semibold text-neutral-dark mt-4 mb-2">Buyer-Focused Drip Campaigns</h4>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Welcome Email"
                    data-template-subject="Welcome to Your Home Search Journey!"
                    data-template-body="Hi {{lead.firstName}},\n\nWelcome to your personalized home search experience! We're excited to help you find your ideal home in {{lead.city}}.\n\nWhat to expect next: We'll be sending you curated listings and helpful tips based on your preferences. Feel free to reply to this email with any questions or specific requirements you have.\n\nBest regards,\n{{agent.name}}">
                    Welcome Email
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Property Search Tips"
                    data-template-subject="Tips for Finding Your Ideal Home in {{lead.city}}"
                    data-template-body="Hi {{lead.firstName}},\n\nReady to dive deeper into your home search? Here are some tips to help you narrow down your ideal home:\n\n1. Define Your Must-Haves: List your non-negotiables (e.g., number of bedrooms, specific school district).\n2. Set Your Budget: Get pre-approved to know your exact buying power.\n3. Explore Neighborhoods: Research areas that fit your lifestyle.\n\nI'm here to guide you every step of the way. Let me know if you'd like to discuss these in more detail!\n\nSincerely,\n{{agent.name}}">
                    Property Search Tips
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Neighborhood Guides"
                    data-template-subject="Discovering the Best Neighborhoods in {{lead.city}}"
                    data-template-body="Hello {{lead.firstName}},\n\nChoosing the right neighborhood is just as important as choosing the right home! As you look for properties in {{lead.city}}, I wanted to share some insights into popular areas.\n\nWould you be interested in a detailed guide for specific neighborhoods like [Neighborhood A] or [Neighborhood B]? They offer [mention specific amenities like good schools, parks, dining].\n\nLet's find the perfect fit!\n\nRegards,\n{{agent.name}}">
                    Neighborhood Guides
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Financing Info"
                    data-template-subject="Understanding Your Mortgage Options"
                    data-template-body="Hi {{lead.firstName}},\n\nNavigating financing options can feel complex, but it's a crucial step in the home buying process. I wanted to share some basic information about mortgage types and why pre-approval is so important.\n\n[Link to a helpful article or resource on your website]\n\nGetting pre-approved not only clarifies your budget but also makes your offers more competitive. I can connect you with trusted local lenders if you need recommendations.\n\nBest,\n{{agent.name}}">
                    Financing Info
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Home Buying Process Overview"
                    data-template-subject="Your Step-by-Step Guide to Buying a Home"
                    data-template-body="Hello {{lead.firstName}},\n\nTo help you visualize the journey ahead, here's a quick overview of the typical home buying process:\n\n1. Pre-approval\n2. Home Search\n3. Making an Offer\n4. Inspections & Appraisal\n5. Closing\n\nEach step has its nuances, and I'll be there to guide you through all of them. What part of the process are you most curious about?\n\nSincerely,\n{{agent.name}}">
                    Home Buying Process Overview
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="New Listing Alerts"
                    data-template-subject="New Homes Just Listed in {{lead.city}} Matching Your Criteria!"
                    data-template-body="Hi {{lead.firstName}},\n\nGreat news! A new property just hit the market in {{lead.city}} that closely matches what you're looking for:\n\n[Property Address]\n[Brief Description]\n[Link to Listing]\n\nLet me know if you'd like to schedule a private showing or learn more about this home!\n\nBest,\n{{agent.name}}">
                    New Listing Alerts
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Follow-Up After Showing"
                    data-template-subject="Your Feedback on [Property Address]"
                    data-template-body="Hello {{lead.firstName}},\n\nThank you for taking the time to view [Property Address] today. I hope you found the showing insightful!\n\nI'd love to hear your thoughts. What did you like or dislike about the property? Are there any questions I can answer? Your feedback helps us refine your search.\n\nLooking forward to your thoughts,\n{{agent.name}}">
                    Follow-Up After Showing
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Are You Still Looking Check-In"
                    data-template-subject="Quick Check-In: Your Home Search"
                    data-template-body="Hi {{lead.firstName}},\n\nHope you're having a great week! I haven't heard from you in a little while regarding your home search in {{lead.city}}.\n\nAre you still actively looking, or have your plans changed? I'm here to help whenever you're ready, whether that's today or a few months from now.\n\nJust reply to this email to let me know!\n\nBest regards,\n{{agent.name}}">
                    “Are You Still Looking?” Check-In
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Buyer Market Update"
                    data-template-subject="Local Market Update: What Buyers Need to Know in {{lead.city}}"
                    data-template-body="Hello {{lead.firstName}},\n\nStaying informed about the local market is key when buying a home. Here's a quick snapshot of current trends in {{lead.city}}:\n\n- Average Days on Market: [X days]\n- Median Home Price: [Y]\n- Inventory Levels: [Low/Medium/High]\n\nUnderstanding these trends can help us craft a strong strategy for your purchase. Let me know if you have any questions!\n\nSincerely,\n{{agent.name}}">
                    Market Update (Buyer)
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Buyer Success Stories"
                    data-template-subject="See How [Client Name] Found Their Dream Home in {{lead.city}}!"
                    data-template-body="Hi {{lead.firstName}},\n\nI love helping clients achieve their homeownership dreams! I wanted to share a recent success story that might inspire you.\n\n[Brief story about a client you helped, e.g., 'Just last month, I helped the [Client Last Name] family find their perfect 4-bedroom home in [Neighborhood] after a challenging search.']\n\nTheir journey shows what's possible with the right guidance. Ready to start your own success story?\n\nBest,\n{{agent.name}}">
                    Success Stories / Testimonials (Buyer)
                </button>

                <h4 class="col-span-full font-semibold text-neutral-dark mt-4 mb-2">Seller-Focused Drip Campaigns</h4>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Intro to Selling with You"
                    data-template-subject="Your Partner in Selling Your Home in {{lead.city}}"
                    data-template-body="Hello {{lead.firstName}},\n\nThank you for considering me as your real estate partner! I'm dedicated to making your selling experience smooth and successful.\n\nMy approach focuses on [mention unique selling propositions, e.g., 'strategic marketing, expert negotiation, and clear communication']. I aim to get you the best possible price in the shortest amount of time.\n\nLet's connect to discuss your goals in detail.\n\nSincerely,\n{{agent.name}}">
                    Intro to Selling with You
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Home Value Estimate Offer"
                    data-template-subject="Curious About Your Home's Current Value in {{lead.city}}?"
                    data-template-body="Hi {{lead.firstName}},\n\nThe market in {{lead.city}} is always evolving, and your home's value might have changed! As a local expert, I'd be happy to provide you with a complimentary, no-obligation home value estimate.\n\nThis personalized report will give you insights into recent sales in your area and current market trends.\n\nJust reply to this email if you'd like to receive yours!\n\nBest regards,\n{{agent.name}}">
                    Home Value Estimate Offer
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Staging Tips"
                    data-template-subject="Maximize Your Home's Appeal: Staging Tips"
                    data-template-body="Hello {{lead.firstName}},\n\nPreparing your home for sale can significantly impact its appeal and final selling price. Here are some essential staging tips to help your property shine:\n\n1. Declutter and Depersonalize\n2. Deep Clean Everything\n3. Enhance Curb Appeal\n4. Optimize Lighting\n\nEven small changes can make a big difference! I can provide more tailored advice during a home walkthrough.\n\nSincerely,\n{{agent.name}}">
                    Staging Tips / How to Prepare the Home
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Seller Market Snapshot"
                    data-template-subject="Your {{lead.city}} Market Snapshot: What Sellers Need to Know"
                    data-template-body="Hi {{lead.firstName}},\n\nUnderstanding the current market is crucial for a successful sale. Here's a quick snapshot of the {{lead.city}} market relevant to sellers:\n\n- Average Days on Market: [X days]\n- Inventory of Homes: [Low/Medium/High]\n- Average Sale Price vs. List Price: [Percentage]\n\nThis data helps us position your home competitively. Let's discuss how these trends impact your selling strategy.\n\nBest,\n{{agent.name}}">
                    Market Snapshot (Seller)
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Pricing Strategy Insights"
                    data-template-subject="Pricing Your Home for Success in {{lead.city}}"
                    data-template-body="Hello {{lead.firstName}},\n\nSetting the right price for your home is one of the most important decisions. Price too high, and you deter buyers; price too low, and you leave money on the table.\n\nMy pricing strategy involves a detailed comparative market analysis (CMA), considering your home's unique features, current market conditions, and recent comparable sales. The goal is to find the 'sweet spot' that attracts maximum buyer interest.\n\nLet's ensure your home is priced perfectly.\n\nSincerely,\n{{agent.name}}">
                    Pricing Strategy Insights
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Photography/Video Checklist"
                    data-template-subject="Get Ready for Your Home's Photoshoot!"
                    data-template-body="Hi {{lead.firstName}},\n\nProfessional photos and videos are essential for attracting buyers online. To prepare your home for its upcoming photoshoot, here's a simple checklist:\n\n- Declutter all surfaces.\n- Open all blinds and curtains.\n- Turn on all lights.\n- Clear kitchen and bathroom counters.\n\nI'll ensure your home looks its absolute best to capture buyer attention!\n\nBest regards,\n{{agent.name}}">
                    Photography/Video Checklist
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Open House Prep"
                    data-template-subject="Preparing for Your Upcoming Open House"
                    data-template-body="Hello {{lead.firstName}},\n\nYour open house is scheduled for [Date] from [Time]! To ensure it's a success and leaves a lasting impression on potential buyers, here are a few preparation tips:\n\n- Ensure your home is sparkling clean.\n- Minimize personal items.\n- Create a welcoming atmosphere.\n- Plan to be away during the open house.\n\nI'll handle all the details to make it a smooth and effective event.\n\nSincerely,\n{{agent.name}}">
                    Open House Prep
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Showing Feedback Requests"
                    data-template-subject="Feedback Request: Your Home Showing"
                    data-template-body="Hi {{lead.firstName}},\n\nYour home at [Property Address] was shown to a potential buyer today. I've reached out to their agent for feedback and will share it with you as soon as I receive it.\n\nYour input is valuable as we navigate the selling process. We're one step closer to finding the right buyer!\n\nBest,\n{{agent.name}}">
                    Showing Feedback Requests
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Negotiation Strategy"
                    data-template-subject="Navigating Offers: Our Negotiation Strategy"
                    data-template-body="Hello {{lead.firstName}},\n\nReceiving an offer on your home is an exciting step! My role is to help you navigate negotiations to secure the best possible terms.\n\nOur strategy will focus on [mention key aspects, e.g., 'analyzing market comps, understanding buyer motivations, and leveraging contingencies']. I'll guide you through every decision to ensure your interests are protected.\n\nLet's get your home sold!\n\nSincerely,\n{{agent.name}}">
                    Negotiation Strategy / Offer Handling
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Post-Close Checklist"
                    data-template-subject="Congratulations! Your Post-Closing Checklist"
                    data-template-body="Hi {{lead.firstName}},\n\nCongratulations on the successful sale of your home! It was a pleasure working with you.\n\nTo help you with the transition, here's a brief post-closing checklist:\n\n- Forward your mail.\n- Transfer utilities.\n- Update your address with relevant institutions.\n\nRemember, my service doesn't end at closing. Please reach out if you have any questions or need recommendations for local services.\n\nBest regards,\n{{agent.name}}">
                    Post-Close Checklist
                </button>

                <h4 class="col-span-full font-semibold text-neutral-dark mt-4 mb-2">General Drip / Sphere Campaigns</h4>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Holiday Message (General)"
                    data-template-subject="Happy Holidays from {{agent.name}}!"
                    data-template-body="Hi {{lead.firstName}},\n\nWishing you and your family a wonderful holiday season filled with joy and warmth!\n\nIt's a pleasure to connect with you. If you or anyone you know has real estate needs in the coming year, please don't hesitate to reach out.\n\nHappy Holidays!\n{{agent.name}}">
                    Holiday Messages
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Anniversary Check-In (Purchase)"
                    data-template-subject="Happy Home Anniversary, {{lead.firstName}}!"
                    data-template-body="Hello {{lead.firstName}},\n\nCan you believe it's already been [X] years since you moved into your wonderful home at {{lead.address}}? Time flies when you're enjoying your space!\n\nI hope you're still loving it. If you ever have any questions about the market, or if you're thinking about future real estate plans, I'm always here to help.\n\nHappy Home Anniversary!\n{{agent.name}}">
                    Anniversary Check-Ins (purchase)
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Client Appreciation Event"
                    data-template-subject="You're Invited! Client Appreciation Event"
                    data-template-body="Hi {{lead.firstName}},\n\nAs a valued client, I'd love to invite you to my annual Client Appreciation Event!\n\nJoin me for [Event Details: e.g., 'a fun evening of food, drinks, and good company at [Location] on [Date] at [Time]'.]\n\nIt's my way of saying thank you for your trust and support. Please RSVP by [Date] so I can get a headcount.\n\nLooking forward to seeing you there!\n{{agent.name}}">
                    Client Appreciation Event Invites
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Newsletter with Blog/Market Stats"
                    data-template-subject="Your Monthly Real Estate Insights from {{agent.name}}"
                    data-template-body="Hello {{lead.firstName}},\n\nHere's your monthly dose of real estate insights! In this month's newsletter, I'm covering:\n\n- [Link to Blog Post Title 1]\n- [Link to Market Stat Article 2]\n- [Local Event/News]\n\nI hope you find this information valuable. As always, feel free to reach out with any questions about the market or your real estate goals.\n\nBest regards,\n{{agent.name}}">
                    Newsletter with Blog or Market Stats
                </button>
                <button class="premade-template-button bg-neutral-medium text-neutral-dark py-3 px-4 rounded-lg shadow-sm hover:bg-neutral-border transition-colors duration-200 text-sm font-medium"
                    data-template-name="Referral Request"
                    data-template-subject="A Quick Question for You, {{lead.firstName}}"
                    data-template-body="Hi {{lead.firstName}},\n\nI hope this email finds you well! I'm reaching out because I truly value your trust and support.\n\nMy business thrives on referrals from amazing clients like you. If you know anyone who might be considering buying or selling a home, I would be incredibly grateful if you would pass my name along.\n\nI promise to provide them with the same high level of service you experienced.\n\nThank you!\n{{agent.name}}">
                    Referral Request / Incentive
                </button>
            `;
            container.innerHTML = premadeTemplatesHTML; // Populate the container

            container.querySelectorAll('.premade-template-button').forEach(button => {
                // No need to clone and replace if we are setting innerHTML each time
                button.addEventListener('click', (e) => {
                    const targetFormPrefix = sectionPrefix === 'drip' ? 'drip-' : '';
                    
                    // Ensure the target form elements exist before trying to set their value
                    const templateNameEl = document.getElementById(`${targetFormPrefix}template-name`);
                    const templateSubjectEl = document.getElementById(`${targetFormPrefix}template-subject`);
                    const templateBodyEl = document.getElementById(`${targetFormPrefix}template-body`);

                    if (templateNameEl) templateNameEl.value = e.target.dataset.templateName || '';
                    if (templateSubjectEl) templateSubjectEl.value = e.target.dataset.templateSubject || '';
                    if (templateBodyEl) templateBodyEl.value = e.target.dataset.templateBody || '';
                    
                    if (sectionPrefix === 'drip') {
                        currentEditingDripTemplateId = null;
                        const dripEditingIdEl = document.getElementById('drip-editing-template-id');
                        if(dripEditingIdEl) dripEditingIdEl.value = '';
                        const dripFormTitleEl = document.getElementById('drip-template-form-title');
                        if(dripFormTitleEl) dripFormTitleEl.textContent = "Create New Email Template (Drip)";
                        const dripSubmitBtnEl = document.getElementById('drip-create-template-submit-button');
                        if(dripSubmitBtnEl) dripSubmitBtnEl.textContent = "Save Template";
                        if(templateNameEl) templateNameEl.focus();
                    } else { // This 'else' block might be redundant if pre-made templates are only for Drip
                        currentEditingTemplateId = null; 
                        const editingIdEl = document.getElementById('editing-template-id');
                        if(editingIdEl) editingIdEl.value = '';
                        const formTitleEl = document.getElementById('template-form-title');
                        if(formTitleEl) formTitleEl.textContent = "Create New Email Template";
                        const submitBtnEl = document.getElementById('create-template-submit-button');
                        if(submitBtnEl) submitBtnEl.textContent = "Save Template";
                        if(templateNameEl) templateNameEl.focus();
                    }
                    showMessage("Template form populated.", "info");
                });
            });
        };

        // Helper to create HTML for a single campaign step (used by both original and drip sections)
        function createCampaignStepHTML(prefix = '') { // prefix will be 'drip-' or empty
            return `
                <div class="flex items-center gap-2 campaign-step-item">
                    <input type="number" placeholder="Delay (days)" class="${prefix}campaign-step-delay p-2 border border-neutral-border rounded-md w-24 bg-neutral-light text-neutral-dark placeholder-secondary-text">
                    <select class="${prefix}campaign-step-template p-2 border border-neutral-border rounded-md flex-grow bg-neutral-light text-neutral-dark">
                        <option value="">Select Email Template</option>
                    </select>
                    <button type="button" class="${prefix}remove-step-button bg-destructive-pastel text-destructive-on-pastel p-2 rounded-md hover:bg-destructive-pastel-darker transition-colors">
                        <svg class="w-4 h-4 pointer-events-none" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path></svg>
                    </button>
                </div>`;
        }


        // --- Profile Section Logic ---
        const renderProfileSection = () => { /* ... */ };
        const handleUpdateProfile = (e) => { /* ... */ };
        const handleChangePassword = async (e) => { /* ... */ };

        // --- Admin User Management ---
        const renderAdminUserList = () => { /* ... */ };
        const openAdminUserModalForAdd = () => { /* ... */ };
        const openAdminUserModalForEdit = (userIdToEdit) => { /* ... */ };
        const handleSaveAdminUser = (e) => { /* ... */ };
        const handleDeleteAdminUser = async (userIdToDelete) => { /* ... */ };

        // --- Dark Mode Toggle ---
        const themeText = document.getElementById('theme-text');
        const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
        let currentTheme = localStorage.getItem('theme') || (prefersDark ? 'dark' : 'light');

        const applyTheme = (theme) => {
            const htmlEl = document.documentElement;
            if (theme === 'dark') {
                htmlEl.classList.add('dark');
                htmlEl.classList.remove('light');
                if(themeText) themeText.textContent = 'Light Mode';
            } else {
                htmlEl.classList.add('light');
                htmlEl.classList.remove('dark');
                 if(themeText) themeText.textContent = 'Dark Mode';
            }
            currentTheme = theme;
            localStorage.setItem('theme', theme);

            if (currentUser) { 
                renderDashboard(); 
                const calendarSection = document.getElementById('calendar-section');
                if (calendarSection && !calendarSection.classList.contains('hidden')) {
                    renderCalendar(currentCalendarFilter);
                }
                const kanbanSection = document.getElementById('kanban-section');
                 if (kanbanSection && !kanbanSection.classList.contains('hidden')) {
                    renderKanbanBoard(); 
                }
            }
        };
        
        applyTheme(currentTheme); 

        document.addEventListener('DOMContentLoaded', initializeApp);
    </script>
</body>
</html>
